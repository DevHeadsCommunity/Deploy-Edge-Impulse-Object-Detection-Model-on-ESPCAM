/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.12.2024 11:33:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 43150, -41126, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.9574357843957841e-05, 9.4238632300402969e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 73,-43,-54,126,-76,9,-68,77,127,-43,-46,-20,-17,85,-64,38,122,-90,-45,-114,109,84,84,-71,-76,-94,-57,94,6,-104,-20,73, 
  /* [1][0][][] */ 66,86,84,-73,-85,87,-8,18,-41,-13,44,118,127,49,47,-1,-43,3,-65,-98,-84,45,39,125,98,85,-51,-11,114,-114,-119,-19, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0030830884352326393, 0.0032436295878142118, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 535, 557, 575, -42, -166, 563, -479, 537, -535, -483, 578, 568, 568, 542, 587, -505, -608, 64, -413, -480, -587, 611, 513, 599, 645, 468, -549, 270, -36, -434, -25, -429, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.3857977541629225e-05, 3.4052383853122592e-05, 3.3028503821697086e-05, 3.0907562177162617e-05, 3.2134081266121939e-05, 3.3452459319960326e-05, 3.3133041142718866e-05, 3.4250984754180536e-05, 3.3551965316291898e-05, 3.3759206417016685e-05, 3.4224533010274172e-05, 3.2499108783667907e-05, 3.3729771530488506e-05, 3.4069176763296127e-05, 3.3922144211828709e-05, 3.3305106626357883e-05, 3.117927917628549e-05, 3.350430415594019e-05, 3.268617729190737e-05, 3.2390980777563527e-05, 3.2086052669910714e-05, 3.1774285162100568e-05, 3.2536230719415471e-05, 3.3426033041905612e-05, 3.3353771868860349e-05, 3.460742300376296e-05, 3.3665350201772526e-05, 3.1983239750843495e-05, 3.2755913707660511e-05, 3.1849227525526658e-05, 3.1753010262036696e-05, 3.3764230465749279e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -32,-49,111,18,102,-11,-82,-92,73,-94,-100,7,63,17,-27,61,-47,-25,-56,-46,-59,-95,13,116,-103,15,86,-41,117,9,-15,-78,88,-58,-83,72,-100,-70,-81,37,67,-82,-87,108,58,-101,115,-10,21,-54,-24,86,-65,-45,-87,113,29,75,127,-112,-64,89,-42,55,1,15,79,98,61,105,94,-108,108,-90,50,92,-98,22,-50,42,62,23,100,-21,-51,-35,-77,109,37,124,-1,-106,13,74,38,29, 
  /* [1][0][][] */ -52,39,-61,7,-30,82,44,17,92,-95,-95,114,74,-17,35,73,117,-33,45,127,-36,5,46,36,45,25,-30,114,20,16,105,-61,67,108,1,38,62,70,-3,-53,-64,11,-12,-87,-26,43,-21,-43,-19,-80,123,57,21,87,-69,-40,34,108,70,80,-46,122,-56,-69,-47,35,86,46,114,37,28,19,-103,102,-39,56,91,-35,-30,84,-69,88,-42,-116,36,124,-58,-58,87,89,102,32,84,98,38,5, 
  /* [2][0][][] */ 52,42,-52,105,-13,-58,96,105,-89,93,-28,127,101,-6,95,-105,-50,-20,45,66,-87,-5,124,30,-14,89,116,17,-60,92,88,100,-63,-16,-84,-99,-77,106,118,-17,-121,-73,24,3,-77,126,-16,-68,105,43,102,-91,-37,68,31,27,-64,106,-54,2,-6,68,-26,80,103,47,59,94,-86,78,19,-64,44,-65,43,38,-45,-15,16,22,48,-91,-1,-43,9,-90,-10,-25,100,124,-15,14,-43,-78,-36,-59, 
  /* [3][0][][] */ 84,5,42,-26,-70,60,-115,43,56,25,78,11,104,107,80,10,118,112,-62,14,126,-93,-69,-112,-25,-119,-90,121,50,-107,98,16,-55,-33,-17,-14,-103,-30,44,53,-17,-92,-106,3,82,37,-53,-92,79,-87,49,24,105,36,97,-108,-115,-125,-126,-40,-106,42,-39,82,63,-30,-67,-28,-33,-80,4,113,24,-117,62,-50,37,104,106,-70,-98,-123,39,116,36,51,-42,-127,-89,47,0,-113,105,-100,-97,41, 
  /* [4][0][][] */ 64,105,2,55,-23,-17,41,24,60,108,-3,60,35,-34,-8,-67,-28,-3,-64,9,108,-82,85,32,-24,8,61,-60,-52,33,-61,-44,81,127,16,-97,-58,-11,-117,59,-36,-63,-80,-92,33,108,38,53,46,-34,-20,-71,-97,49,-88,25,45,-91,25,22,1,-71,-44,-70,-52,65,3,-32,31,-108,-103,-86,-51,17,106,52,61,-30,-12,-64,4,-42,-105,-18,7,68,97,-3,-124,-83,44,56,47,110,-106,-22, 
  /* [5][0][][] */ 101,-86,86,92,48,-113,33,64,117,-111,6,-60,31,108,46,44,70,67,-64,108,42,61,27,-19,-94,-57,-7,-84,58,41,22,-96,-31,6,-60,27,-105,-27,56,32,-92,-48,50,105,-27,30,43,-42,-104,109,34,30,48,20,43,-14,113,58,-45,-43,42,-61,46,-64,-22,101,-17,33,84,10,113,-62,-40,87,-19,-63,18,-39,22,94,116,46,36,106,-74,89,3,45,77,-90,127,96,-17,32,83,-73, 
  /* [6][0][][] */ 11,-48,109,71,-90,-66,-6,62,-19,-88,2,-93,81,50,110,-124,36,-3,-5,98,-84,-126,105,54,-66,-88,-14,-62,-33,-120,42,-82,-96,-127,-51,-110,-14,35,-115,76,87,53,19,-20,-118,102,-94,-51,-86,13,-31,-66,55,-55,90,-33,6,-13,-73,114,-101,-3,64,-77,-57,62,96,-54,73,-11,-112,-10,51,-75,-96,-46,-85,-108,-62,-34,29,-33,39,-27,-77,-92,-46,-99,80,91,91,12,-54,-68,72,-33, 
  /* [7][0][][] */ 118,74,-29,-33,-63,114,-13,8,127,9,-86,21,62,-78,55,81,58,24,8,122,64,43,4,91,-57,107,50,64,-67,116,-13,39,31,28,74,108,-93,95,0,-18,92,-70,93,76,57,5,108,-100,55,-50,-97,-68,-15,90,25,37,120,-80,13,-57,18,1,88,-102,-59,-53,76,28,-97,29,75,92,91,35,68,68,-53,64,-87,56,99,-31,-9,-73,93,43,-99,99,89,16,95,69,-53,-33,8,-54, 
  /* [8][0][][] */ 7,26,-54,-100,50,22,-83,-30,-4,31,36,86,-7,-54,-95,-81,-78,87,-73,7,20,-35,71,100,-126,84,35,66,-78,8,-98,112,85,-38,37,-12,106,-7,-29,60,81,96,-120,-127,-20,-36,-33,99,16,-97,-74,-2,-74,-15,-40,-118,42,97,-104,106,101,33,33,99,-42,-49,-31,94,-96,42,22,-11,66,59,-1,13,-57,96,73,64,25,77,-121,-88,17,32,64,-50,27,-48,-94,92,-83,-106,-58,53, 
  /* [9][0][][] */ -1,1,107,38,76,-104,-54,-125,32,45,-16,47,-34,-87,-109,-33,0,-5,-107,-77,-5,91,-116,-111,103,-15,-21,18,-20,-69,-93,96,56,-3,19,-27,-85,7,-43,-50,47,-73,45,-99,75,14,-112,45,63,-18,-90,-52,66,-74,-76,95,79,-66,-23,-5,-97,102,75,-82,-95,11,96,41,-48,93,100,-97,-1,72,-113,-102,-86,-127,-48,96,25,23,93,26,-51,-102,29,-23,91,24,-38,103,109,-7,53,-43, 
  /* [10][0][][] */ -60,86,100,-55,-8,103,111,36,51,33,31,-58,107,90,-22,19,-26,85,-87,-50,-7,38,67,-58,43,60,-103,-103,-37,90,-87,-80,91,100,127,82,-28,17,-22,44,-40,117,-98,-28,-89,-53,6,-48,-1,4,47,7,71,24,-55,-25,-96,-5,39,-59,9,85,119,50,126,-76,-84,-20,32,-10,-81,-57,94,75,-71,116,-6,74,76,34,87,2,65,99,-91,76,108,-17,45,19,5,-62,-54,-43,-33,-55, 
  /* [11][0][][] */ 115,2,-9,117,127,43,60,41,123,100,-72,124,0,-80,40,-65,-51,-104,76,53,44,85,35,-108,-97,-92,-9,75,92,5,30,-18,-87,-74,62,58,-54,89,-19,-53,-29,108,-66,6,-41,-62,-89,-81,76,111,125,45,-87,-102,26,30,-64,-49,-27,-92,-68,94,97,16,40,81,-46,33,101,69,-77,-66,48,119,-93,61,-61,45,-35,103,-100,-22,-64,-47,50,-75,20,-23,-88,4,20,-102,-86,-25,-63,-29, 
  /* [12][0][][] */ 18,72,-45,11,96,11,-28,44,-63,65,-6,24,-35,22,59,-70,-89,-25,-38,-69,38,0,28,106,-55,-41,111,-90,103,25,-28,119,-78,-65,-35,26,9,-64,-7,53,113,44,-99,-31,-13,-75,-29,127,-40,-111,-66,102,47,5,-73,95,-13,-49,63,65,70,121,6,64,121,34,-35,122,67,111,52,81,93,125,-6,4,-26,46,-104,-81,-47,108,56,13,-27,41,63,122,-83,-97,102,51,103,-7,40,85, 
  /* [13][0][][] */ 113,-61,110,105,100,114,86,73,85,-96,20,-19,98,80,76,-39,-108,-63,-60,39,78,-17,127,-38,-52,47,17,25,-76,-76,88,41,47,106,-10,46,-71,-18,35,78,-64,80,-41,20,-35,35,7,-19,36,105,-24,-106,-87,28,107,-71,-40,37,-11,-75,-14,122,-66,23,-42,-63,-80,90,-27,-3,106,8,-81,48,-65,-32,-95,77,92,-49,62,-90,104,19,-73,-93,101,124,-1,-40,-64,60,114,-44,77,5, 
  /* [14][0][][] */ -55,-91,98,80,86,-26,-8,-103,-64,-31,78,92,-18,-70,-77,-77,-41,-51,24,36,-31,45,10,71,-101,-62,-21,41,-101,-103,-70,43,113,-18,-21,17,107,127,45,-98,-11,-105,46,98,75,-106,75,-73,120,43,87,53,107,-10,-6,24,-43,19,59,91,-5,-72,-16,82,-80,-11,88,-102,-76,-80,-76,104,14,93,60,-62,65,-95,66,47,56,-17,-106,-38,-105,-80,-100,113,119,19,99,-45,85,111,-4,72, 
  /* [15][0][][] */ 13,-31,-35,67,87,-90,57,-103,52,-7,-77,4,100,-5,-98,-117,83,5,-101,17,41,12,67,103,74,63,33,88,14,49,62,-106,-1,3,-70,-12,-74,106,103,-73,17,109,-56,-29,21,-83,-50,-87,-8,-85,-11,29,-106,-106,-56,-14,63,47,-54,110,-52,-71,-6,98,-42,97,-78,-1,-68,-1,56,-80,12,-20,53,-114,-8,49,99,72,-89,54,-115,-64,-127,-43,-99,32,79,64,-119,-46,53,105,-114,107, 
  /* [16][0][][] */ -79,-4,101,-75,37,119,-65,35,41,46,-123,66,-24,-61,-67,-72,106,78,67,60,108,75,-52,47,-46,51,-83,61,-118,4,36,10,-121,78,51,53,-48,48,-63,-84,27,-53,67,89,60,104,100,-24,-65,-122,-3,121,-54,121,64,39,22,86,64,18,114,109,27,58,49,15,-49,95,37,97,-44,-20,23,89,58,85,-21,96,-127,-25,5,-93,53,15,4,100,100,3,75,5,-24,113,74,-41,-100,19, 
  /* [17][0][][] */ 42,-124,41,92,-39,-122,-75,-90,47,-88,77,64,112,70,-104,43,47,47,110,124,-89,-2,22,-38,23,69,-66,22,117,-46,-27,71,-26,-22,43,12,-38,108,-81,-19,-111,-56,-4,-15,3,1,99,-102,74,95,-11,12,-10,62,99,-62,-127,99,-75,-127,38,-85,73,105,-76,-90,52,-110,-99,9,119,34,28,-109,-61,62,111,-37,46,-51,20,-21,-67,-109,-107,63,90,-41,18,74,-91,-106,-24,102,15,13, 
  /* [18][0][][] */ -80,96,109,-76,-16,-118,-113,13,-10,90,-115,-45,-43,32,56,-64,17,-32,54,-32,98,-44,15,-86,23,-102,-25,107,24,28,-1,38,40,-33,-116,-110,-41,30,-43,57,-24,-5,-36,-16,-123,12,35,-9,13,-29,64,41,-119,-15,-4,82,-40,28,-24,-100,79,105,6,29,-78,-127,-39,87,64,-78,-79,104,-105,-42,-97,-112,49,49,-7,-82,-64,-6,-29,-68,103,-41,67,63,-116,-83,-67,103,98,-35,43,-27, 
  /* [19][0][][] */ 18,27,73,35,57,-85,97,90,89,-66,26,-15,-102,29,-63,59,71,-110,107,55,-28,76,-61,10,73,-86,26,-73,-99,-126,-69,46,78,-87,29,-8,5,-75,-62,-106,47,-120,-89,8,-91,28,75,-100,-25,35,-45,46,-39,13,3,-14,20,98,-6,-24,52,-60,98,61,-76,-3,-31,-5,-14,51,72,-56,-68,-127,-61,-86,-28,-120,10,104,56,-120,-35,80,-92,-11,4,-7,88,26,-9,63,-33,112,67,-54, 
  /* [20][0][][] */ -9,68,66,91,-95,96,15,54,6,11,-96,-1,-14,83,33,-81,-58,-44,-76,-41,15,-55,-87,-79,72,-81,-115,42,15,4,-45,117,99,46,-23,50,35,-41,-25,-119,-84,-39,-100,-112,-32,-69,-77,102,61,-127,-114,43,42,113,49,-6,92,69,95,97,107,-60,-78,-41,-36,-67,-61,13,-96,-86,-79,74,-72,-95,25,13,107,72,106,104,82,5,80,-24,57,113,-22,72,13,92,21,65,24,20,-14,-2, 
  /* [21][0][][] */ 100,86,84,-98,110,-83,84,25,9,-67,-68,51,13,49,-43,-88,-101,-24,38,-4,124,-42,85,-80,70,-84,-25,86,26,15,-2,-24,14,23,-87,-109,127,111,-113,-25,-27,11,39,-6,-94,-81,-77,107,-25,-67,3,90,47,77,-92,36,-51,64,-45,109,68,-71,23,-5,95,34,-28,-70,-101,6,73,90,43,-12,85,81,-109,-21,76,122,23,108,44,-78,34,-92,76,-81,-102,91,124,-114,-59,-64,82,-22, 
  /* [22][0][][] */ 27,-51,-67,-91,96,-54,118,61,-85,82,-69,-110,122,-110,-111,-81,44,92,-116,-52,103,-74,43,37,106,-6,-108,112,-52,-68,-72,-114,53,61,27,21,15,-6,-49,-111,-18,-9,13,107,66,-117,96,-12,-64,-89,17,-19,-56,-89,-42,40,-17,-25,-14,-51,126,-72,-69,-110,-59,19,-108,-46,124,115,-15,6,-65,18,76,-84,56,-44,78,109,120,-100,-71,-127,86,96,108,-26,-49,45,-59,63,10,25,-19,114, 
  /* [23][0][][] */ 68,-83,14,67,105,-110,12,-94,67,-77,94,84,27,-99,29,-32,98,-26,-98,110,103,-72,113,-26,-6,-7,92,30,80,58,79,-35,-32,48,29,44,107,2,-103,16,-109,5,19,-102,-62,-85,121,36,80,-105,-79,-53,90,-57,-45,98,-79,-12,108,41,-102,-83,-44,-2,42,39,-107,-104,73,-6,122,-63,2,-26,-29,-86,54,-12,104,127,-44,-47,30,-105,101,15,122,-15,-82,51,115,0,103,-46,-21,94, 
  /* [24][0][][] */ -74,-43,-93,-58,-75,-108,-60,-82,81,124,94,57,127,73,-27,-108,-72,52,39,-40,110,-69,-43,-26,65,-21,88,69,120,68,13,-58,7,13,62,42,-40,-74,75,-9,-78,-96,117,15,31,-29,54,85,-84,-41,-9,17,84,66,81,-64,4,90,38,-2,105,5,48,108,-87,101,-34,-84,-91,66,-45,-15,-28,53,108,114,74,-63,-93,-70,-67,-91,-51,-114,12,74,-2,-91,39,-96,18,-69,-14,41,-81,44, 
  /* [25][0][][] */ -93,-52,-75,-3,92,-72,-98,50,56,-119,-37,22,74,4,-97,-20,-67,63,38,-95,77,88,-2,-54,24,-54,-89,44,83,-76,32,109,91,-112,51,77,107,-49,-12,-8,-98,91,-92,10,102,40,60,45,-101,83,-61,-3,51,-16,-57,14,-27,58,-100,62,127,47,60,49,8,71,-7,-9,-80,3,-14,-105,37,-100,77,29,77,82,25,31,56,44,-38,74,-72,-39,-98,-83,-14,-27,109,19,-126,-9,-9,-70, 
  /* [26][0][][] */ 47,-120,-29,-20,-104,-7,-16,-19,-114,-127,100,78,-85,-55,3,-20,106,25,-86,-74,6,64,92,7,44,57,6,41,6,-1,-98,-5,-37,-67,-105,-110,-72,78,-57,103,-99,98,50,27,-76,68,-48,95,-24,23,-12,101,4,-48,-9,-112,90,57,48,27,-5,-99,58,-28,107,-21,-63,51,-94,72,80,90,73,-103,-92,1,41,-114,-103,3,-35,70,76,-74,73,-6,-51,9,-88,107,3,12,-60,108,44,81, 
  /* [27][0][][] */ 20,23,-53,-104,-115,-61,-66,-19,54,108,44,-111,-23,65,92,-25,71,-12,64,-84,-87,15,-17,-9,-94,53,-111,15,71,36,-26,-3,76,82,-89,-86,-90,-68,-118,95,-92,32,26,42,127,39,75,108,96,79,68,-64,-89,-65,-3,-27,109,-24,-109,-77,-39,-44,-32,62,47,-32,-116,116,56,8,-118,16,67,-56,-7,-84,74,-68,107,112,94,-13,119,-37,-75,-63,-27,51,-38,18,-31,-42,65,21,113,63, 
  /* [28][0][][] */ 89,-19,85,49,-119,-79,-103,-76,-56,-112,58,73,-83,-88,1,104,97,112,-73,81,-45,21,-109,-74,-120,81,-82,-79,-73,-79,-1,-24,-118,14,82,70,18,-106,-39,32,101,35,-93,44,-127,-11,17,53,21,-70,-99,-49,-84,4,55,42,54,-13,82,47,-9,-50,-100,6,61,67,-22,80,-82,31,-105,-46,72,37,-5,-102,-126,-71,-92,44,-73,-104,114,-47,63,-122,67,-96,-114,-79,-35,-70,-46,52,-115,-76, 
  /* [29][0][][] */ 51,57,54,-60,-95,12,-126,2,100,-18,-97,-104,106,-114,-55,-52,-110,103,23,-73,-82,-41,52,1,-40,4,-51,-31,-112,-12,105,-4,49,-1,-89,-62,-16,102,-15,92,59,111,-52,82,-6,107,-62,-31,17,-9,57,-91,70,-105,112,43,-100,54,-56,120,-127,95,-102,-59,-68,-64,50,90,95,-95,30,-79,111,75,58,22,117,-70,-35,29,-11,-90,-13,-72,61,119,41,79,-42,98,69,80,-107,16,-6,57, 
  /* [30][0][][] */ 29,-68,-64,39,-103,25,-66,-11,121,-17,6,-45,-106,19,63,17,-5,36,97,-107,43,-105,-119,16,-114,26,-72,127,-14,-114,-98,6,-87,-74,-125,-54,21,-17,-2,26,97,-67,-10,114,111,-45,108,71,-74,78,23,-110,97,-54,-10,109,-74,-60,-82,-53,-108,-3,-74,-31,-114,-91,-99,96,-65,117,49,-40,-96,114,42,-90,-54,-75,-74,-61,31,28,-113,-19,-112,32,-116,116,-40,-122,83,58,-36,2,15,-72, 
  /* [31][0][][] */ 90,-95,36,96,47,64,-61,-101,-35,-18,-80,-87,97,-125,-52,109,-60,-93,32,44,59,32,-35,104,39,-114,32,37,-77,-78,49,111,16,24,-96,-11,91,-35,-72,-116,72,-67,-35,28,2,-54,-40,20,68,26,89,-24,-119,-60,-84,20,-115,64,1,127,-44,-6,82,-79,66,114,-49,-75,70,-123,-124,6,-100,-47,0,3,-62,-53,45,86,-79,-38,52,88,58,92,-96,15,14,-56,-89,-54,16,104,-10,-30, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018432666547596455, 0.0018538504373282194, 0.0017981092678382993, 0.001682642730884254, 0.0017494158819317818, 0.0018211898859590292, 0.0018038003472611308, 0.0018646623939275742, 0.001826607040129602, 0.0018378895474597812, 0.001863222336396575, 0.001769288326613605, 0.0018362869741395116, 0.0018547645304352045, 0.0018467599293217063, 0.0018131677061319351, 0.0016974353929981589, 0.0018240123754367232, 0.0017794725717976689, 0.0017634016694501042, 0.001746801077388227, 0.0017298280727118254, 0.0017713092966005206, 0.0018197511089965701, 0.0018158172024413943, 0.0018840674310922623, 0.0018327798461541533, 0.001741203828714788, 0.0017832691082730889, 0.0017339079640805721, 0.0017286698566749692, 0.0018381628906354308, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1906, -185, 4306, 8596, 6089, -2824, 6291, -1978, -2986, -1079, 5904, -3343, 5910, 8228, 2781, 2866, -776, -717, -2551, 9316, 2924, -1067, 3660, -583, -1567, 4872, 2337, 2716, 7748, 2301, 5916, 1575, 1806, 7151, 8462, 4491, -827, 4763, 3626, -5213, -510, 2034, 41, 2336, -1691, 509, -2030, 1129, -9650, 2466, 1504, -5412, 9101, -1035, 2591, 2106, 1234, 3329, -903, -3156, 233, 2098, 402, 5619, 7336, 4743, 4268, 6715, 5031, -1174, 4949, 5877, 4446, -2182, 6263, 9421, 1112, -6614, 692, 2064, 13459, 2282, -925, -4120, 1471, 913, 1822, -3310, 3629, -655, 3924, 1618, 136, -3699, -214, 1770, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010565787670202553, 0.00014574952365364879, 0.00012898097338620573, 9.0178240498062223e-05, 0.00010552137246122584, 0.00014454829215537757, 9.5971045084297657e-05, 0.00013223348651081324, 0.00013009627582505345, 0.00013632129412144423, 0.00011255530989728868, 0.00012856157263740897, 9.714825137052685e-05, 7.3958493885584176e-05, 0.0001160850515589118, 0.00013531820150092244, 0.00021213886793702841, 0.00014638739230576903, 0.00011944348079850897, 6.8163557443767786e-05, 0.00015292038733605295, 0.00011777082545449957, 0.0001026330646709539, 0.0001517871132818982, 0.00015947615611366928, 0.00012141213665017858, 0.00012943832552991807, 0.00012240646174177527, 9.4378985522780567e-05, 0.00019043729116674513, 9.0495843323878944e-05, 0.00014454932534135878, 0.00015428292681463063, 9.0870176791213453e-05, 7.3853603680618107e-05, 0.00011257110600126907, 0.00012294051703065634, 9.3818896857555956e-05, 0.00011336577153997496, 0.00010208860476268455, 0.00011077785165980458, 9.8542535852175206e-05, 0.00016150496958289295, 0.0001107230709749274, 0.00014383690722752362, 0.00011494685168145224, 0.00011685490608215332, 0.0001091036683646962, 7.3876362876035273e-05, 0.00010211138578597456, 0.0001783428160706535, 9.3028931587468833e-05, 8.3780556451529264e-05, 0.00015977080329321325, 0.00012594329018611461, 0.00012366955343168229, 0.00013589355512522161, 0.00011660627205856144, 0.00015232138684950769, 9.8306503787171096e-05, 0.00014252688561100513, 0.00012957565195392817, 0.00016863478231243789, 0.00011798045306932181, 9.4694281870033592e-05, 0.00010145658598048612, 9.1489433543756604e-05, 0.00010436795855639502, 0.00013618356024380773, 0.00010653721255948767, 9.9987031717319041e-05, 0.0001147996008512564, 0.00010289587953593582, 0.00010188759188167751, 0.00011198139691259712, 8.3849634393118322e-05, 9.3643066065851599e-05, 9.5131188572850078e-05, 0.0001254991366295144, 0.00010254155495204031, 6.2071594584267586e-05, 0.00012900120054837316, 0.00011670466483337805, 0.00010717922850744799, 0.00013210084580350667, 0.00010926272079814225, 0.00015680446813348681, 0.00012256135232746601, 0.00016924040392041206, 0.00015724250988569111, 0.00015694742614869028, 0.00013047593529336154, 0.00011138946138089523, 0.00011957299284404144, 0.00021923129679635167, 0.00013513733574654907, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -11,94,-81,39,55,-36,98,75,-63,8,37,-89,84,127,-63,28, 
  /* [1][0][][] */ -17,3,-65,-29,-13,49,26,-127,27,-52,-20,-60,-6,-39,-52,10, 
  /* [2][0][][] */ -19,-23,28,72,19,46,-103,127,-22,-1,78,-61,-14,-61,-40,66, 
  /* [3][0][][] */ 88,-102,87,-10,2,-39,-29,127,-31,67,67,60,-13,54,6,12, 
  /* [4][0][][] */ -45,-25,-2,52,-81,8,-35,-127,-2,-2,31,-6,28,43,103,112, 
  /* [5][0][][] */ 127,27,-29,-20,-80,26,24,66,18,-14,63,86,116,31,-83,0, 
  /* [6][0][][] */ 11,-42,-53,-59,-74,-1,-6,-53,-60,-46,-33,36,92,46,127,-8, 
  /* [7][0][][] */ -53,36,-34,-81,-1,-56,-78,19,-102,51,-68,-69,-127,-34,20,91, 
  /* [8][0][][] */ 48,42,73,11,50,21,65,5,61,-25,38,8,-127,-28,-76,7, 
  /* [9][0][][] */ -34,63,26,-44,-28,-11,29,-13,-32,45,-41,10,43,127,25,24, 
  /* [10][0][][] */ 66,45,-36,56,-25,-23,47,-55,-73,-29,-61,-93,-127,-78,4,88, 
  /* [11][0][][] */ 46,2,67,7,-7,-33,10,104,-87,29,-34,7,-14,-7,62,127, 
  /* [12][0][][] */ -60,-29,14,7,32,-5,127,39,-62,34,-2,-7,-17,80,-55,107, 
  /* [13][0][][] */ 16,27,37,50,127,28,98,101,-53,109,-91,-57,41,86,-125,-17, 
  /* [14][0][][] */ -127,117,12,-8,4,-1,60,-6,-40,40,113,0,-102,17,-53,50, 
  /* [15][0][][] */ -9,-14,-127,-48,73,-38,-80,-31,-20,-24,-13,-68,-3,-75,-50,50, 
  /* [16][0][][] */ 112,-12,4,-13,26,-26,44,-19,-33,5,127,45,50,6,-34,19, 
  /* [17][0][][] */ 17,21,-31,-101,-15,-57,120,-127,5,-26,-44,28,41,78,10,46, 
  /* [18][0][][] */ 31,127,-17,-54,55,-72,-22,-52,-44,127,-23,-8,-26,60,-11,-31, 
  /* [19][0][][] */ -74,-118,127,-85,51,-126,32,-43,42,48,81,110,19,-8,65,-29, 
  /* [20][0][][] */ -21,84,60,8,12,-2,14,-32,57,-2,88,-19,-127,-31,-73,-14, 
  /* [21][0][][] */ -60,42,17,16,59,39,70,55,-127,51,-36,13,-19,23,-54,-23, 
  /* [22][0][][] */ 11,-90,51,18,23,-127,104,0,13,-47,-42,-67,35,-85,-58,-53, 
  /* [23][0][][] */ -62,-102,48,62,33,-22,23,-48,22,-32,77,7,7,67,73,127, 
  /* [24][0][][] */ 2,0,21,80,49,20,-56,-127,70,12,-43,13,6,4,-21,-28, 
  /* [25][0][][] */ -6,34,14,-47,-30,0,14,-27,-22,47,-40,-14,42,127,25,7, 
  /* [26][0][][] */ -74,80,10,24,36,-96,-6,-34,13,27,10,83,5,-4,-82,127, 
  /* [27][0][][] */ -17,-127,-54,7,-64,100,-1,-60,18,-44,60,-33,27,-46,-104,-23, 
  /* [28][0][][] */ -37,-1,42,77,30,8,-39,-127,-111,51,96,-8,66,7,-46,-26, 
  /* [29][0][][] */ -127,102,-17,-25,-22,20,-123,-77,-40,-29,-7,3,3,-64,-112,53, 
  /* [30][0][][] */ 52,74,-47,86,-106,-101,-79,-20,-41,1,5,-111,127,29,-10,98, 
  /* [31][0][][] */ 127,31,-65,-31,-64,26,99,36,-55,-21,68,46,38,23,-24,6, 
  /* [32][0][][] */ -28,-16,127,-2,-28,80,75,20,-19,-18,-5,18,12,74,71,43, 
  /* [33][0][][] */ -7,18,-58,-44,-18,23,126,34,-2,-8,29,-65,101,127,-58,56, 
  /* [34][0][][] */ -88,-17,88,16,23,-47,107,-3,-127,31,37,-48,52,63,-44,-37, 
  /* [35][0][][] */ -9,15,-43,17,-69,114,-38,-23,-16,127,-6,97,-75,62,16,25, 
  /* [36][0][][] */ -7,-75,127,-53,-54,21,-46,-12,19,18,-53,79,4,-89,-37,45, 
  /* [37][0][][] */ 93,-3,78,-28,115,-73,-56,37,-59,127,-74,-2,-104,-49,120,-28, 
  /* [38][0][][] */ 41,42,26,-98,-10,-63,-107,53,-93,68,-111,-48,-80,-127,-112,57, 
  /* [39][0][][] */ -76,24,-62,-31,-84,-76,74,13,-127,-39,23,78,31,1,-1,50, 
  /* [40][0][][] */ 127,35,10,-101,-78,28,22,-43,-38,-31,-43,-92,19,55,41,39, 
  /* [41][0][][] */ 99,-77,-67,-50,-8,0,-60,-20,59,-28,5,-62,127,-70,61,-36, 
  /* [42][0][][] */ -16,-83,-38,127,7,-92,-107,14,12,5,3,54,-81,69,-60,-6, 
  /* [43][0][][] */ -89,-45,-50,-122,-61,4,1,77,43,-127,-35,33,-18,-50,-28,92, 
  /* [44][0][][] */ -35,50,33,-51,-33,-19,33,121,119,-92,84,106,127,61,-23,-2, 
  /* [45][0][][] */ 37,85,-89,93,127,-88,-38,-65,115,-79,77,-75,-26,14,-73,63, 
  /* [46][0][][] */ -26,-43,15,-12,101,-28,26,14,-6,127,-29,-112,29,59,-53,77, 
  /* [47][0][][] */ 84,-41,-37,-15,83,-13,-41,-59,1,127,-27,32,-3,-110,-83,17, 
  /* [48][0][][] */ 14,30,-15,-125,-1,-49,120,-127,6,5,-41,47,49,69,6,37, 
  /* [49][0][][] */ -21,127,-66,37,42,-48,62,52,-27,27,33,-76,-35,66,119,-97, 
  /* [50][0][][] */ 8,39,-17,6,-127,-4,-68,-63,54,75,28,35,-42,-45,-3,32, 
  /* [51][0][][] */ 127,-38,-48,-13,-45,86,-94,-41,45,-14,-42,68,-31,-67,4,40, 
  /* [52][0][][] */ -32,-64,58,81,-41,-122,-127,-21,-47,-53,-43,-64,7,-80,1,78, 
  /* [53][0][][] */ 22,95,59,-127,3,106,93,-15,-11,-23,-6,-35,89,-119,2,57, 
  /* [54][0][][] */ 37,127,3,-18,-8,-87,-104,55,4,-28,-38,122,85,95,24,59, 
  /* [55][0][][] */ -52,-21,64,28,60,-42,109,89,-84,-1,17,19,127,47,-14,3, 
  /* [56][0][][] */ 127,25,9,19,-49,111,-49,-67,-25,41,-75,1,-52,103,-4,41, 
  /* [57][0][][] */ -44,-34,-49,-32,-72,-93,62,-24,-127,-31,59,54,20,38,-2,47, 
  /* [58][0][][] */ 44,-59,67,26,9,-68,-13,11,24,-11,-127,-24,22,-32,-41,50, 
  /* [59][0][][] */ 77,10,-127,88,5,38,89,-30,-71,-55,32,-104,-114,-60,25,110, 
  /* [60][0][][] */ 3,34,-15,17,-20,-22,-23,8,-34,-83,66,121,-43,-127,-32,-3, 
  /* [61][0][][] */ -38,8,89,-92,-73,46,4,125,-18,-97,53,78,93,-13,14,127, 
  /* [62][0][][] */ 76,45,-10,-127,-18,5,7,-39,-10,30,-33,44,26,-20,-82,-71, 
  /* [63][0][][] */ -2,-30,5,-5,-61,-75,-60,8,-78,-9,-37,-17,127,0,50,-14, 
  /* [64][0][][] */ 21,-4,-7,55,-97,-49,-16,-83,55,127,30,8,31,-61,-46,103, 
  /* [65][0][][] */ -33,4,-15,-19,-80,71,29,-30,53,-114,100,-59,75,59,-127,63, 
  /* [66][0][][] */ -127,111,-114,-100,33,-30,-123,-63,-119,116,108,-8,-121,-53,55,74, 
  /* [67][0][][] */ 6,-30,-127,-105,62,72,8,-24,-29,-3,49,-21,29,39,20,50, 
  /* [68][0][][] */ 49,18,-7,-40,-62,34,15,32,-62,76,127,-9,-19,-52,-127,-4, 
  /* [69][0][][] */ 72,-113,66,-49,27,-121,-27,127,-3,74,80,90,-25,70,-34,-2, 
  /* [70][0][][] */ 41,0,127,35,91,-28,117,5,28,29,-62,48,-76,54,-82,41, 
  /* [71][0][][] */ 12,32,88,-73,-127,-72,17,12,-24,-15,24,-103,-68,7,15,35, 
  /* [72][0][][] */ -62,-97,22,-127,72,-11,13,46,-71,12,-122,-20,60,121,-60,122, 
  /* [73][0][][] */ 18,15,59,-5,127,-101,-46,2,-38,106,-88,42,-97,-63,121,-19, 
  /* [74][0][][] */ -100,7,-127,-71,59,-37,-34,21,-82,-2,-122,-40,-36,-57,-46,75, 
  /* [75][0][][] */ 95,-22,49,-44,19,8,-127,-26,-8,-101,71,5,1,-12,-6,-14, 
  /* [76][0][][] */ 6,-49,-42,104,32,92,100,-61,74,-127,72,106,39,-79,-66,37, 
  /* [77][0][][] */ -35,-32,127,-25,32,-25,-31,-112,20,17,42,87,50,54,22,-1, 
  /* [78][0][][] */ -43,7,7,-36,-1,-51,37,-5,29,-20,16,-100,-104,-65,-127,-52, 
  /* [79][0][][] */ -106,-77,-15,23,127,30,-25,14,21,34,-14,57,-49,-79,-70,-20, 
  /* [80][0][][] */ 9,-112,40,127,-42,-22,-112,89,-9,16,80,-5,-72,-1,-15,81, 
  /* [81][0][][] */ 106,58,-12,86,4,29,24,127,22,18,109,62,109,25,59,-20, 
  /* [82][0][][] */ -47,1,11,-34,29,-127,-111,-77,0,79,-40,-38,-23,102,-67,-21, 
  /* [83][0][][] */ 112,-20,83,-35,-37,-9,-127,-5,27,-125,14,-58,-16,-9,11,-22, 
  /* [84][0][][] */ 21,-68,-108,32,127,47,47,41,-117,15,-107,-32,57,-31,-69,11, 
  /* [85][0][][] */ 18,95,37,-52,96,7,46,-119,127,-45,45,-21,104,-80,13,4, 
  /* [86][0][][] */ 113,-38,127,52,1,-58,76,37,-60,-51,-96,-43,33,14,-67,7, 
  /* [87][0][][] */ -3,6,16,-78,70,-29,-43,17,36,-38,76,-39,-81,-127,-2,27, 
  /* [88][0][][] */ -54,-29,35,-5,19,30,-65,-42,-7,8,-73,-127,-42,-36,-14,-15, 
  /* [89][0][][] */ -67,14,15,-69,23,8,-127,26,87,19,-65,-15,-9,-76,-38,-21, 
  /* [90][0][][] */ -15,-19,-24,-71,127,15,-58,33,40,58,25,-7,26,12,-70,-20, 
  /* [91][0][][] */ -39,-59,14,48,-52,-5,-12,76,-42,-65,34,-55,0,69,28,127, 
  /* [92][0][][] */ -24,74,1,-14,-18,57,-96,48,-42,-5,62,6,-35,127,48,24, 
  /* [93][0][][] */ -5,82,-58,-75,68,94,-84,13,65,63,82,55,-127,29,-39,84, 
  /* [94][0][][] */ 21,60,102,9,-127,-42,14,-10,21,-16,28,-15,-52,-28,11,-21, 
  /* [95][0][][] */ 1,33,46,8,127,-16,-98,82,24,13,-81,91,-3,13,111,-40, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015980970347300172, 0.0022044915240257978, 0.0019508637487888336, 0.0013639644021168351, 0.0015960324089974165, 0.0021863225847482681, 0.0014515817165374756, 0.0020000585354864597, 0.0019677327945828438, 0.0020618876442313194, 0.0017024221597239375, 0.0019445201614871621, 0.0014693872071802616, 0.0011186373885720968, 0.0017558102263137698, 0.0020467154681682587, 0.0032086439896374941, 0.0022141393274068832, 0.0018066071206703782, 0.0010309878271073103, 0.0023129521869122982, 0.0017813078593462706, 0.0015523461624979973, 0.0022958111949265003, 0.0024121096357703209, 0.0018363834824413061, 0.0019577811472117901, 0.0018514229450374842, 0.0014275015564635396, 0.0028804030735045671, 0.0013687681639567018, 0.0021863381844013929, 0.0023335609585046768, 0.0013744300231337547, 0.0011170508805662394, 0.0017026610439643264, 0.0018595005385577679, 0.0014190300134941936, 0.0017146805766969919, 0.0015441110590472817, 0.0016755377873778343, 0.0014904760755598545, 0.0024427957832813263, 0.0016747091431170702, 0.0021755627822130919, 0.0017385947285220027, 0.0017674544360488653, 0.0016502153594046831, 0.0011173951206728816, 0.0015444556483998895, 0.0026974717620760202, 0.0014070817269384861, 0.0012671981239691377, 0.0024165662471204996, 0.0019049179973080754, 0.0018705273978412151, 0.0020554179791361094, 0.001763693755492568, 0.0023038922809064388, 0.0014869060833007097, 0.0021557484287768602, 0.0019598582293838263, 0.0025506357196718454, 0.001784478547051549, 0.0014322703937068582, 0.0015345517313107848, 0.0013837964506819844, 0.0015785867581143975, 0.0020598042756319046, 0.0016113972524181008, 0.0015123243210837245, 0.0017363674705848098, 0.0015563212800770998, 0.0015410707565024495, 0.0016937416512519121, 0.0012682429514825344, 0.0014163706218823791, 0.0014388787094503641, 0.0018982002511620522, 0.0015509621007367969, 0.0009388455655425787, 0.001951169571839273, 0.0017651820089668036, 0.0016211078036576509, 0.001998052466660738, 0.0016526210820302367, 0.0023716997820883989, 0.0018537655705586076, 0.002559795742854476, 0.0023783252108842134, 0.0023738620802760124, 0.0019734753295779228, 0.001684788498096168, 0.00180856604129076, 0.003315918380394578, 0.0020439799409359694, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 10351, 15789, -2966, 4052, -649, 8117, -516, 3234, 16593, -3743, -9520, 10311, -13599, 11975, 4669, 7963, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.3567400755127892e-05, 6.9073408667463809e-05, 5.0798975280486047e-05, 6.7262684751767665e-05, 7.1787617343943566e-05, 7.048413681332022e-05, 4.5221418986329809e-05, 5.4565753089264035e-05, 9.7982738225255162e-05, 6.8233552156016231e-05, 4.9587259127292782e-05, 5.1315873861312866e-05, 7.0683832745999098e-05, 5.8650490245781839e-05, 8.2641970948316157e-05, 6.9230831286404282e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -110,42,61,-34,-71,-12,-73,-6,-51,13,-18,-32,36,36,44,-33,10,-4,101,9,7,-55,127,74,43,24,10,38,-65,-116,-89,0,-54,-44,35,18,14,20,-5,24,-3,-8,-83,1,-73,-23,0,98,-18,9,-42,-11,-10,9,30,-54,-105,7,-8,89,62,30,2,8,-35,-57,-52,30,-61,-72,6,-16,15,-6,-74,-56,-45,14,-42,3,-58,79,83,-76,16,58,8,49,39,-15,-11,-33,-30,-36,-64,15, 
  /* [1][0][][] */ 37,23,23,-55,-69,-19,-14,10,-13,27,58,-53,9,-10,-68,-31,-12,-5,-68,23,-17,-76,13,48,-6,-62,1,-45,65,-101,105,-81,48,20,-21,55,34,67,-16,-38,26,16,-10,-13,5,60,-127,-44,-54,-48,-11,-24,35,-48,-40,47,13,-4,-35,18,29,50,-6,-93,-16,-11,-65,-5,0,-17,-86,-5,-46,-25,17,-75,2,19,26,-66,-26,-23,-82,-35,34,-33,-26,17,-72,-10,-50,46,16,63,-56,50, 
  /* [2][0][][] */ 76,-39,23,30,24,-82,68,5,-15,-16,-16,-6,-78,-27,10,-40,-86,-46,-37,50,11,-48,-49,22,-4,-71,2,-30,-33,40,-52,127,-45,116,-35,17,-18,-12,-11,-13,-95,78,80,13,-67,4,-23,-19,32,7,-39,-59,48,-21,-24,69,35,-6,49,-10,4,38,-36,5,70,9,2,-13,33,56,-42,-8,42,50,61,43,34,-74,69,47,80,-20,-47,30,-61,26,19,70,10,12,-24,31,-43,42,-11,28, 
  /* [3][0][][] */ -3,-11,-21,11,10,-13,10,-57,-27,54,41,60,26,-7,-58,39,8,-33,27,13,16,127,31,-50,7,27,-24,1,63,-40,63,-15,-17,31,-33,-30,18,53,38,10,-76,-38,-38,30,-34,33,21,-6,-21,-46,-9,-30,52,-87,-35,-50,10,84,-30,-4,-7,-15,-40,-1,26,45,-38,-5,-22,2,14,-74,-36,-44,31,-8,11,-9,-36,-29,-31,-11,-58,14,-14,-42,33,-24,-5,23,32,-15,50,23,-34,58, 
  /* [4][0][][] */ 28,7,-38,19,29,17,-41,0,-34,74,87,-15,-14,2,10,-52,15,-10,-28,48,19,-44,53,79,-72,1,-127,18,-46,-64,9,17,-59,-54,12,58,9,37,24,26,-32,-38,48,-27,-7,7,-29,55,-37,57,13,19,39,-13,-79,21,49,-20,11,-8,42,-8,27,10,-44,15,-32,5,-46,29,-42,51,42,-60,-37,-47,28,-57,-7,10,-43,88,-75,3,-28,22,30,-54,50,5,27,4,-55,-25,37,29, 
  /* [5][0][][] */ -85,39,43,-14,43,-16,57,-44,-7,39,-2,-36,40,-20,-25,-41,-16,-37,52,20,-126,-29,-79,51,-44,-5,51,15,43,-76,-18,41,52,121,-7,40,-5,17,40,-21,-29,95,71,-32,-4,73,43,0,1,19,-17,30,10,-36,30,-98,43,-53,-66,-60,69,104,-46,-18,80,-46,-86,-63,-65,-27,-69,-3,-14,12,-22,-48,21,-43,-40,-21,127,-19,25,-96,-79,45,29,-18,-43,40,26,-9,-21,37,6,97, 
  /* [6][0][][] */ 44,-13,-86,38,-31,-125,113,97,-70,69,-23,83,-127,-88,66,56,4,-55,-4,10,-1,-11,-66,-69,-65,43,77,35,36,34,103,-53,29,16,12,-77,10,11,32,74,10,23,-54,-31,-3,-71,-80,26,36,-125,-28,79,34,10,-15,-68,77,44,18,-9,-122,51,-105,6,34,5,6,56,48,34,0,-57,-41,28,100,34,72,-18,45,-74,-12,-55,-75,76,1,-68,49,21,-48,65,33,41,-21,8,-30,119, 
  /* [7][0][][] */ 37,85,-35,-51,-22,-16,40,7,-58,35,-52,-52,-40,11,14,-7,-45,-46,-30,62,-1,127,9,35,-11,2,21,28,52,43,83,-23,64,34,-21,4,7,-3,5,27,-61,-3,8,-52,16,-50,76,-26,45,-79,-86,-25,-46,8,-2,-14,28,15,-96,4,-9,115,14,-22,-18,-2,-41,15,-36,-11,-96,32,12,70,-36,40,-53,53,12,-71,-18,-56,55,-70,38,-26,-2,-1,-11,74,-87,43,57,-30,-45,12, 
  /* [8][0][][] */ -6,84,-47,36,-40,-25,-91,23,-93,-29,10,-3,-38,36,35,92,0,-47,4,3,28,-9,7,-7,-36,80,0,31,-15,-16,-45,-37,-26,-50,-32,-66,-38,25,45,5,-1,-38,25,6,-41,-34,8,-9,-23,-12,55,75,-6,-18,-73,98,-34,35,-6,-34,-33,11,25,57,-38,-59,-44,-6,-45,1,-2,7,-14,-53,-116,-21,-53,26,-70,-40,-30,8,-39,-39,4,3,18,25,16,63,-58,-16,-92,-127,18,-51, 
  /* [9][0][][] */ -18,17,-71,54,-30,-39,75,54,-16,43,-28,95,-33,-20,25,127,18,12,71,23,22,19,31,-99,-38,-6,21,-15,13,-20,43,55,-23,-4,-4,-122,22,-15,-18,-21,-14,22,47,-21,-7,3,14,13,33,85,21,-16,-52,-82,-5,-1,-4,-13,73,-24,-70,54,-60,-33,84,-15,-20,2,-66,32,42,32,-13,93,-26,-19,-27,15,-37,-10,50,-35,59,2,23,-21,-8,-32,-61,23,6,-2,68,30,-41,-1, 
  /* [10][0][][] */ 69,-2,-43,6,-30,-37,78,4,5,-29,-24,-4,-98,-13,3,-11,-67,-31,23,28,44,40,18,0,-49,81,39,-13,-52,-82,-29,-8,85,-39,47,7,70,-86,93,127,17,-56,10,12,-19,-93,-9,59,31,85,-75,-51,-15,22,12,54,14,-67,81,46,-15,45,-70,-27,-5,-65,26,53,26,-20,-7,39,116,41,22,-80,33,-53,62,-8,-49,26,30,28,-43,-15,10,44,-48,-9,32,56,55,64,-27,9, 
  /* [11][0][][] */ -55,-42,35,-61,15,-12,-33,-50,41,-51,6,-9,-22,7,2,-3,-54,-8,60,7,-59,28,-71,-89,9,19,-53,40,29,-60,31,-38,22,-13,10,-22,-80,6,-109,21,-77,62,-41,60,17,15,-8,-42,16,-32,-63,-55,25,19,76,-57,-33,-75,6,-55,-20,-49,-19,-127,4,-60,57,72,109,13,71,-17,-41,-18,64,-27,96,31,26,47,26,-15,-20,82,80,2,-13,-23,-81,-62,-6,27,49,35,60,72, 
  /* [12][0][][] */ 35,-22,0,-33,35,103,-5,37,40,57,2,58,17,44,10,-4,-56,51,16,52,127,-2,63,-74,29,20,-66,-71,-18,74,5,13,35,-7,4,-38,39,1,-27,-37,24,-17,42,54,-25,33,0,-14,-65,24,-4,16,-28,-28,9,18,-40,54,13,44,22,-93,8,-95,-3,86,-7,-38,1,-36,64,6,-14,18,-13,49,-13,45,-70,-11,-22,24,113,19,-11,68,-24,-64,67,11,-75,57,73,2,-15,-91, 
  /* [13][0][][] */ -11,37,-13,-40,-29,-9,10,-33,17,-28,-34,-70,64,-111,-39,-77,-19,-31,-86,-11,-90,-28,17,101,-33,3,114,1,22,-41,60,51,13,2,-127,126,-35,-49,30,-60,119,18,3,25,-6,-96,55,-33,79,-13,-46,27,22,-10,-9,72,73,-58,-39,-12,46,41,-6,-86,-1,37,-33,30,-62,-32,-76,-4,-62,20,-46,-89,-109,25,37,86,-14,59,35,-87,50,40,39,-11,-21,-15,-12,21,-56,19,-25,-9, 
  /* [14][0][][] */ -5,28,-80,-35,83,102,-94,-12,37,-43,81,-8,25,-29,-36,-65,-78,17,33,127,5,-28,3,12,6,40,-28,76,13,0,-28,3,56,2,-38,12,-14,58,67,6,65,-4,26,-3,-15,-43,63,-33,26,-13,-8,-19,39,21,-37,26,17,64,-93,-6,-17,-69,-42,-97,10,-38,-56,-3,-83,51,-23,36,7,-33,-20,-43,37,-10,-61,-32,31,12,3,-20,-8,54,-19,-20,-31,68,63,16,-1,-35,-53,-65, 
  /* [15][0][][] */ -76,-44,42,-57,25,-28,-32,-84,-13,11,-9,79,-7,-20,28,87,-106,-17,16,-61,37,-22,-10,-92,53,-11,49,-57,-65,-111,-67,44,-32,56,83,-98,-14,-31,27,-21,-23,2,38,-22,-4,-5,68,102,-50,-5,20,-48,-48,54,17,-49,-100,-19,113,10,-37,11,-105,28,-66,-10,17,24,58,-65,95,-30,55,-34,-39,-42,19,24,53,9,-19,72,62,39,-5,-22,-127,17,-12,-52,-85,35,53,-37,-18,60, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022766145411878824, 0.0029356197919696569, 0.0021589563693851233, 0.0028586641419678926, 0.0030509736388921738, 0.0029955757781863213, 0.0019219103269279003, 0.0023190444335341454, 0.004164266400039196, 0.0028999259229749441, 0.0021074584219604731, 0.0021809246391057968, 0.0030040629208087921, 0.0024926457554101944, 0.0035122835543006659, 0.0029423104133456945, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -56, -235, -3470, -6120, 592, 3981, 332, -436, -1237, -2801, 10998, -2222, 630, 13856, 11613, -6881, 18675, 2563, -6645, 504, -367, -3612, 1457, -2485, 472, -5130, -1960, -5785, 1659, -10537, -1031, -133, 14401, 961, -2042, -11, 517, -1924, -661, 7997, -152, -245, 1193, -7935, 15836, 20058, 364, 21262, -1326, 18089, 17892, -4296, -1072, 578, 576, 15112, -663, 221, 16702, 7865, 10373, 14204, 10233, -9503, 676, 561, -2725, 4690, -3448, -3075, 1293, 3067, 15410, -930, -13, 12750, -924, 92, 11171, -1610, -922, 24234, -2926, 3413, 24256, 1621, -4639, -3741, 378, -6986, 14823, -567, 584, 385, -6461, -3816, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00019053276628255844, 0.0001407862437190488, 0.00010078761988552287, 0.00012022587179671973, 0.00021138714510016143, 0.00027522433083504438, 0.00022524886298924685, 0.00017687847139313817, 0.00017170784121844918, 0.00012660074571613222, 8.9528824901208282e-05, 0.00031504195067100227, 0.00020752569253090769, 9.4238384917844087e-05, 0.00010376944555900991, 0.00010562012903392315, 7.9020952398423105e-05, 0.00020889277220703661, 0.00012800251715816557, 9.8716882348526269e-05, 0.00013812743418384343, 0.00023778194736223668, 0.00017861876403912902, 0.00016328017227351665, 0.0006476137787103653, 0.00015146397345233709, 0.00019150586740579456, 0.0001063736344804056, 0.00014174044190440327, 8.1868165580090135e-05, 0.00026556200464256108, 0.00016937231703195721, 0.00012278713984414935, 0.00014702028420288116, 0.000249617820372805, 0.000303787732264027, 0.00014597301196772605, 0.00022658720263279974, 0.00027171862893737853, 8.70653020683676e-05, 0.00016312053776346147, 0.00018063889001496136, 0.00019559415522962809, 8.239432645495981e-05, 7.6723699748981744e-05, 7.4266696174163371e-05, 0.0001862963690655306, 6.9171743234619498e-05, 0.0001546108687762171, 6.5156920754816383e-05, 8.9718843810260296e-05, 0.0001097593194572255, 0.00015103550686035305, 0.00013237881648819894, 0.00020972911443095654, 0.00010159866360481828, 0.00017256841238122433, 0.00017068575834855437, 0.00012505392078310251, 0.00010653669596649706, 0.00012209975102450699, 0.00013360950106289238, 0.00011308762623229995, 9.0179884864483029e-05, 0.00014430425653699785, 0.00020370451966300607, 0.00024603292695246637, 0.00014949278556741774, 0.00017678434960544109, 0.00012653990415856242, 0.0002235131396446377, 0.00013396484428085387, 8.9820925495587289e-05, 0.000157672751811333, 0.00022965663811191916, 0.0001007727041724138, 0.00013207373558543622, 0.0001465784152969718, 0.00012935607810504735, 0.00018868377082981169, 0.00020544975996017456, 6.1133730923756957e-05, 0.0002171254891436547, 0.00014993404329288751, 5.3423609642777592e-05, 0.00017670189845375717, 0.00013060892524663359, 0.00017172723892144859, 0.00016886755474843085, 0.00015783599519636482, 8.0889170931186527e-05, 0.00029422275838442147, 0.00017813086742535233, 0.00019847750081680715, 0.00010733146336860955, 0.00029472069581970572, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 24,119,-10,17,-38,-3,46,37,57,-70,-89,42,-18,-15,26,-48,-105,17,12,18,33,74,75,89,11,-2,-46,-5,-21,21,19,-24,-51,-2,-27,91,-2,52,-3,-5,21,-41,-4,33,-107,-57,10,-41,-17,-99,-23,-6,9,52,-22,-4,-72,-67,-52,-127,-127,7,-102,-3,-25,40,37,-20,-24,50,38,-16,-39,5,45,-3,2,-40,-68,27,3,-96,53,-37,-72,-49,-7,14,-120,10,-86,45,71,-12,69,6, -33,-33,-8,94,-15,86,-25,-9,63,33,-127,76,-34,-52,-95,127,-111,62,48,66,127,20,98,127,28,20,24,58,-5,127,-9,-127,83,72,4,33,59,101,-32,-127,127,-12,94,127,-66,-82,127,-82,-7,-125,-89,-17,7,127,-30,-127,8,28,-127,-70,-58,-127,-49,93,-35,84,107,-42,1,127,127,-7,-64,35,-35,-97,30,-60,-13,127,-2,-72,127,-81,-117,-43,86,57,100,88,-75,9,127,-29,127,35, 19,-111,-5,7,-23,-19,-10,41,31,69,-68,19,-14,34,9,-77,-39,14,8,11,30,59,51,82,20,-34,32,38,-3,25,-7,-53,-54,-77,-29,68,4,-3,11,14,-11,27,-15,59,-39,-36,1,-11,27,-67,21,4,-1,-14,12,-5,54,-79,-23,-79,-86,32,-79,-13,44,15,-32,-14,-25,-11,10,4,-18,-35,-8,11,7,-17,-62,5,4,-111,34,-17,-8,-30,-2,-25,-84,-1,-25,40,24,34,26,-7, 
  /* [0][1][][] */ 88,-5,55,118,4,-56,126,40,-25,-127,-86,127,-7,-127,-63,34,-71,-45,70,25,-115,7,-127,-68,-17,59,-126,127,-92,74,127,78,31,60,13,120,-127,73,-25,-53,61,-127,18,77,-127,-78,4,-127,-108,-111,-127,23,127,-65,72,-20,-127,-3,-56,7,-53,-73,-32,49,-104,-18,98,-105,-45,43,-41,-127,-121,68,127,-86,97,72,-101,-42,127,-127,-23,110,-31,-15,0,82,-12,25,-61,35,-18,-90,84,-10, -127,13,-46,127,-93,-127,-127,-127,72,8,-49,33,-101,-113,-53,115,-127,-127,127,127,24,-127,-122,108,-127,127,17,77,-94,-25,-103,95,-127,79,127,-42,18,127,127,-92,-37,22,18,40,-50,-127,-76,-116,-7,-127,-115,127,34,88,53,-89,19,22,104,-21,-23,-48,-127,127,-17,-127,127,127,23,72,-97,-80,-14,65,-119,-127,127,127,73,-44,-73,-3,-85,59,-120,-94,127,127,127,127,-127,-127,-109,-63,85,127, 54,-7,93,64,1,-30,0,30,-40,106,-56,65,2,-14,-127,78,30,-37,25,-9,-117,11,-92,-78,-3,16,127,-4,127,98,17,-109,-22,-127,-12,127,-118,-5,-39,-41,-10,94,19,122,-8,-30,-8,-88,127,-100,-78,5,62,-91,-127,27,99,-5,-121,71,-17,-47,6,54,127,-39,-18,-19,-57,-6,-33,-47,-127,-127,-11,-42,-1,-33,-127,-37,-66,-124,-12,127,-127,14,-8,-7,-28,-8,1,51,-28,127,25,-12, 
  /* [0][2][][] */ 34,-127,28,-8,7,14,33,45,-35,-43,3,-45,7,-14,-6,39,-13,17,-7,32,-3,48,15,-21,17,50,-3,-9,-32,16,5,22,-32,-20,-23,-4,40,-14,-2,-25,-4,18,-10,-35,-10,-48,-13,-17,-11,21,-25,23,-2,-10,-33,-15,-9,-3,12,26,-42,3,46,-10,-28,47,-36,-34,25,8,11,71,-20,19,16,5,-41,-29,-20,2,12,-28,-9,-49,-74,29,-33,-17,-86,34,2,31,-8,-5,11,-15, -47,15,127,3,127,74,-37,6,-127,22,-52,-53,127,-26,-71,34,27,46,-2,-57,22,13,62,8,65,-57,-3,33,-23,105,-13,31,-88,22,10,-39,57,31,21,-100,-23,1,-127,9,-6,-19,-36,-77,-9,-73,-65,79,123,-76,-34,-82,-14,127,-29,8,66,-99,88,69,-28,20,-34,-3,127,-12,8,88,-73,25,-24,-54,-10,-73,-38,-34,-8,-83,-21,-82,-85,127,28,-5,90,35,44,33,-28,-16,0,-5, 16,88,21,-19,-3,-10,-15,36,9,68,19,-8,1,-5,4,49,-27,4,-1,22,-12,40,-1,-28,11,39,17,21,2,29,-19,-70,-53,-24,-15,-14,36,-39,-5,-16,-7,-4,9,11,-20,-23,-16,-16,20,31,-18,6,-3,-23,7,3,5,5,6,59,-44,21,22,-18,37,13,-57,9,18,-1,14,70,11,-9,-11,12,-18,-15,-7,4,-7,-69,-6,-20,-57,27,-31,-32,-80,31,12,24,-15,5,-5,-14, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.01068553701043129, 0.0078956317156553268, 0.0056524127721786499, 0.0067425565794110298, 0.011855100281536579, 0.015435243025422096, 0.012632499448955059, 0.0099197709932923317, 0.0096297897398471832, 0.0071000750176608562, 0.0050209923647344112, 0.017668312415480614, 0.011638540774583817, 0.0052851159125566483, 0.0058196405880153179, 0.0059234313666820526, 0.0044316854327917099, 0.011715210042893887, 0.0071786893531680107, 0.0055362805724143982, 0.0077465190552175045, 0.013335384428501129, 0.01001737080514431, 0.0091571453958749771, 0.036319740116596222, 0.0084944646805524826, 0.010740110650658607, 0.0059656896628439426, 0.0079491455107927322, 0.0045913639478385448, 0.014893356710672379, 0.0094988076016306877, 0.0068861986510455608, 0.0082452520728111267, 0.013999169692397118, 0.017037147656083107, 0.0081865182146430016, 0.01270755659788847, 0.015238635241985321, 0.0048828320577740669, 0.0091481925919651985, 0.010130664333701134, 0.010969392023980618, 0.004620872437953949, 0.0043028499931097031, 0.0041650552302598953, 0.010447949171066284, 0.0038793180137872696, 0.0086709503084421158, 0.0036541570443660021, 0.0050316490232944489, 0.0061555672436952591, 0.0084704356268048286, 0.0074241231195628643, 0.011762114241719246, 0.0056978981010615826, 0.0096780527383089066, 0.0095724686980247498, 0.0070133255794644356, 0.0059748347848653793, 0.006847647950053215, 0.0074931429699063301, 0.0063422266393899918, 0.0050575053319334984, 0.0080929305404424667, 0.011424240656197071, 0.013798119500279427, 0.0083839157596230507, 0.0099144922569394112, 0.0070966626517474651, 0.0125351557508111, 0.0075130714103579521, 0.0050373738631606102, 0.0088426675647497177, 0.012879697605967522, 0.0056515759788453579, 0.0074070137925446033, 0.0082204705104231834, 0.0072546005249023438, 0.010581840761005878, 0.011522118002176285, 0.0034285271540284157, 0.012176920659840107, 0.0084086628630757332, 0.0029961247928440571, 0.0099098682403564453, 0.0073248632252216339, 0.0096308775246143341, 0.0094704991206526756, 0.0088518233969807625, 0.0045364596880972385, 0.016500720754265785, 0.0099900085479021072, 0.011131096631288528, 0.0060194069519639015, 0.016528647392988205, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 9189, 5543, 1517, -1509, 6772, 15505, 11750, 1719, -483, 12854, 1413, -5890, 6299, 5334, 451, -914, 4479, 11220, -510, -200, 5728, 16716, 11809, -2802, -4845, -1225, 19521, 266, 2537, 1630, 11475, -3117, 13801, 3268, 5831, -5762, 1072, -8169, 390, 2869, 3821, 1442, 1945, -608, 1358, 2363, 5961, 5065, 5248, 3258, 9418, 3447, -3765, 2945, 1788, 3016, 2876, 3716, 11174, 2041, -1151, 9177, 6740, 5199, 5931, 11611, -6553, 3491, 8391, -984, 7337, 2355, 5251, 4583, 4279, 3185, -448, 2618, 3909, 6052, 3412, 4195, 12962, 1259, 4226, 5528, 1187, -1125, 23038, -423, 878, -2031, 15571, 3422, 59, -1359, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 8.1402453361079097e-05, 6.7748893343377858e-05, 0.00010718211706262082, 0.00013109679275657982, 0.00010538358037592843, 5.2866609621560201e-05, 7.1899376052897424e-05, 0.00015845363668631762, 0.00011676836584229022, 6.085436325520277e-05, 0.00014694919809699059, 8.1630118074826896e-05, 8.5098996351007372e-05, 9.1890164185315371e-05, 0.00012877746485173702, 9.6245792519766837e-05, 0.00013690370542462915, 6.6126107412856072e-05, 0.00010883799404837191, 0.00010141525126527995, 0.00010527827544137836, 5.4587315389653668e-05, 7.537168130511418e-05, 0.00010292154911439866, 0.00011253763659624383, 9.8753509519156069e-05, 4.5147768105380237e-05, 7.8747892985120416e-05, 0.00010700878192437813, 0.00012163879000581801, 7.1484813815914094e-05, 9.2965812655165792e-05, 5.5732220062054694e-05, 0.00014430904411710799, 0.00011696080764522776, 0.00010223685239907354, 0.0001233577640959993, 7.5665782787837088e-05, 0.00011759764311136678, 0.00010119527723873034, 0.00011329304106766358, 0.00016320972645189613, 0.00017433044558856636, 0.00015614004223607481, 0.00018111045937985182, 0.00016925370437093079, 9.5099239842966199e-05, 0.00011861164239235222, 0.00010820727038662881, 0.00014989757619332522, 7.809887028997764e-05, 0.00011946367885684595, 0.00010130876762559637, 0.00012372592755127698, 0.00014058723172638565, 0.00013019422476645559, 0.00011713918502209708, 0.00010002754424931481, 7.1775764808990061e-05, 0.00011319723853375763, 0.00017295549332629889, 7.6161973993293941e-05, 8.7959851953200996e-05, 0.0001125630151364021, 9.3072245363146067e-05, 6.5601248934399337e-05, 8.7953158072195947e-05, 0.00011813846504082903, 7.3681767389643937e-05, 0.00012596808664966375, 9.3674214440397918e-05, 8.9931643742602319e-05, 7.9088109487202018e-05, 8.6670232121832669e-05, 0.00012596670421771705, 8.4217987023293972e-05, 0.0001652463834034279, 0.00013338007556740195, 9.4228940724860877e-05, 8.2780177763197571e-05, 0.00012367691670078784, 9.9298194982111454e-05, 5.8516234275884926e-05, 9.6784497145563364e-05, 8.3432802057359368e-05, 0.00012049036013195291, 0.00010893784929066896, 0.00019616520148701966, 4.0629081922816113e-05, 0.00013322843005880713, 0.00017381072393618524, 0.00010795927664730698, 5.4256823204923421e-05, 0.00012300761591177434, 0.0001484166132286191, 0.00010104051034431905, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -58,52,-5,-32,-22,-53,-55,-26,67,-53,47,-61,89,-109,12,-127, 
  /* [1][0][][] */ -111,58,-101,-107,-73,22,-15,64,-43,10,91,-60,52,127,26,49, 
  /* [2][0][][] */ -48,-12,-72,11,-13,-44,31,-45,-86,127,74,14,46,54,-45,115, 
  /* [3][0][][] */ -55,-73,10,-39,-79,6,-59,-121,-10,20,35,-71,-73,-43,-127,-45, 
  /* [4][0][][] */ 68,-4,-12,47,-62,-12,-127,39,26,77,16,47,4,-2,-57,-85, 
  /* [5][0][][] */ -88,49,-88,-30,53,-63,-14,-75,98,-37,15,-41,12,-127,-124,-87, 
  /* [6][0][][] */ -14,-35,-38,27,-83,77,44,-39,-24,-54,127,-31,1,3,-124,5, 
  /* [7][0][][] */ -25,118,127,-94,60,87,3,-60,37,66,-83,-24,61,9,19,78, 
  /* [8][0][][] */ -39,3,34,-4,51,5,97,127,-69,-20,-59,-80,38,90,-70,-56, 
  /* [9][0][][] */ 42,52,93,19,-126,-47,-102,-107,68,19,127,29,-36,-96,68,-20, 
  /* [10][0][][] */ -18,-114,8,-78,-118,61,35,26,-32,-49,-8,44,-18,55,-127,20, 
  /* [11][0][][] */ 109,-65,-4,84,-105,-43,52,-8,127,122,-58,49,24,-77,-26,102, 
  /* [12][0][][] */ -67,-67,127,-16,49,-14,34,55,78,-32,100,64,-26,6,-109,40, 
  /* [13][0][][] */ -13,-39,30,28,22,4,127,30,-111,19,4,21,-29,120,91,-77, 
  /* [14][0][][] */ 127,-74,115,3,60,69,110,57,85,59,61,37,67,-49,44,-53, 
  /* [15][0][][] */ 3,126,5,-48,44,127,-82,73,-46,-27,-45,-18,-45,119,-18,-56, 
  /* [16][0][][] */ -41,64,105,-40,18,72,-2,-9,-12,17,-10,51,90,5,83,127, 
  /* [17][0][][] */ 8,104,87,-127,38,-49,0,-80,-50,88,-30,56,-71,-36,100,-58, 
  /* [18][0][][] */ -89,-1,-77,-98,121,88,-44,-75,52,82,127,74,-2,108,-49,-10, 
  /* [19][0][][] */ 52,127,78,74,42,-24,-4,5,-32,107,47,100,64,70,-45,41, 
  /* [20][0][][] */ 115,3,-2,73,-86,-13,-39,54,-35,-49,-127,-38,106,-43,33,-4, 
  /* [21][0][][] */ -89,-73,-28,112,-34,5,-127,65,8,3,38,27,-32,40,-65,4, 
  /* [22][0][][] */ 0,-4,-73,-46,127,6,-42,62,55,68,50,72,-19,29,-7,40, 
  /* [23][0][][] */ -74,25,-22,21,16,66,108,96,-24,127,-18,-36,-2,36,-54,-29, 
  /* [24][0][][] */ 31,-81,44,7,127,32,72,-41,58,28,39,34,-71,27,-7,-21, 
  /* [25][0][][] */ 127,-58,80,27,8,-6,-34,79,121,-30,-55,6,121,-63,92,45, 
  /* [26][0][][] */ 64,39,114,89,78,-15,-73,-15,2,74,12,127,27,-66,31,-57, 
  /* [27][0][][] */ -65,41,-71,21,-40,113,15,-106,38,-85,127,13,46,-51,124,108, 
  /* [28][0][][] */ -46,31,-77,-127,34,-76,0,-57,-102,84,-59,33,-25,26,-37,71, 
  /* [29][0][][] */ 83,100,-78,37,35,79,-42,-22,45,51,4,61,-127,21,-28,75, 
  /* [30][0][][] */ -35,84,-127,-57,79,-35,18,11,-53,49,-64,-15,14,67,-21,125, 
  /* [31][0][][] */ 20,-127,92,40,73,-73,-77,33,-20,-8,20,-35,-82,54,33,127, 
  /* [32][0][][] */ -59,69,-3,36,-110,47,7,58,16,-127,34,-81,24,49,42,50, 
  /* [33][0][][] */ -68,-12,65,86,-5,13,-54,15,-37,-47,9,-11,-7,-8,4,127, 
  /* [34][0][][] */ -15,6,-86,-94,60,-15,-9,67,20,-7,0,-10,-58,-25,-37,127, 
  /* [35][0][][] */ 74,-6,25,-12,-3,16,-81,-24,-19,-127,-56,9,-6,-28,48,-26, 
  /* [36][0][][] */ -2,27,-127,-18,31,122,-14,39,-29,13,64,35,10,26,-74,53, 
  /* [37][0][][] */ 65,48,63,-61,55,-127,48,-28,-122,58,-96,-30,7,22,112,29, 
  /* [38][0][][] */ -31,127,28,-49,32,22,72,-90,16,0,-108,26,-47,-91,-77,20, 
  /* [39][0][][] */ 91,43,-127,-113,-25,-18,19,-54,11,-13,6,-48,68,6,-107,-61, 
  /* [40][0][][] */ -37,26,-74,-80,-42,-9,19,-127,-14,-13,2,-37,34,79,43,63, 
  /* [41][0][][] */ -34,-88,-16,127,-3,-13,-63,-10,-8,-55,71,-62,-61,-7,8,24, 
  /* [42][0][][] */ -23,63,-24,-127,16,12,9,-24,58,3,-47,13,75,-24,-20,18, 
  /* [43][0][][] */ 8,40,2,16,127,27,25,19,13,35,-6,-81,-109,-46,-15,-13, 
  /* [44][0][][] */ 75,-9,23,38,-30,-16,3,31,23,-33,31,6,127,8,-51,-26, 
  /* [45][0][][] */ 11,-79,-62,33,-41,-93,10,38,24,-17,6,34,-88,127,34,-33, 
  /* [46][0][][] */ -12,-81,42,78,-7,0,-101,52,33,-51,53,-27,38,78,78,127, 
  /* [47][0][][] */ -31,-47,15,75,-4,2,58,18,6,-68,-127,-40,46,-33,-54,19, 
  /* [48][0][][] */ -83,95,-20,-33,6,62,-6,-126,28,-21,36,-58,57,-127,-62,5, 
  /* [49][0][][] */ -49,13,34,-32,-5,12,115,127,-34,-41,-5,12,-39,35,-40,35, 
  /* [50][0][][] */ 54,24,-82,26,34,-127,-37,2,-74,44,-38,-4,24,-88,-122,-49, 
  /* [51][0][][] */ -52,54,-27,117,-45,44,-49,-82,-36,-84,4,-61,5,30,-8,127, 
  /* [52][0][][] */ -127,9,15,-8,20,53,70,15,20,-95,-39,-49,-103,-63,-119,-4, 
  /* [53][0][][] */ -47,-68,-60,-127,-39,-2,11,81,33,-70,-42,32,-33,33,70,99, 
  /* [54][0][][] */ 4,-55,3,-7,-56,57,58,-19,-19,-87,48,32,-21,-18,-127,42, 
  /* [55][0][][] */ -23,-34,-43,26,66,-25,69,94,-56,-64,-127,-31,65,-35,-29,41, 
  /* [56][0][][] */ 71,-37,-55,-28,-127,20,-117,-5,-8,-14,-41,9,102,-40,47,13, 
  /* [57][0][][] */ -59,18,15,-30,127,45,59,47,-34,56,2,-15,-57,86,-102,-20, 
  /* [58][0][][] */ 26,3,-1,-17,30,-6,-45,-51,45,-127,-56,-2,-76,-45,-23,58, 
  /* [59][0][][] */ -81,-30,0,7,23,61,-101,-46,83,127,-93,10,-29,6,-22,-5, 
  /* [60][0][][] */ 16,-56,-2,16,-127,-54,36,9,-4,50,-16,50,2,-40,34,46, 
  /* [61][0][][] */ 26,39,-98,-9,-55,-16,-127,-81,-18,-1,48,107,79,-56,120,69, 
  /* [62][0][][] */ 48,-25,54,-17,-10,28,40,117,-55,127,17,96,25,34,69,112, 
  /* [63][0][][] */ 20,-125,-14,-15,-72,16,46,-23,-9,-24,5,-15,-34,127,109,37, 
  /* [64][0][][] */ -13,-4,-127,-33,20,55,34,-13,-12,-96,41,0,66,-35,-66,101, 
  /* [65][0][][] */ -5,-6,72,66,82,-25,74,80,-37,5,-127,-84,40,115,-84,-19, 
  /* [66][0][][] */ -49,-127,-4,-96,-63,-125,45,-32,-11,-37,15,91,-70,-45,-75,82, 
  /* [67][0][][] */ -22,-72,-76,-19,-86,118,-6,-127,-84,-31,-42,-85,10,-19,-55,39, 
  /* [68][0][][] */ 127,45,29,-9,-76,10,-74,-58,-86,-112,-29,-4,35,-31,70,-74, 
  /* [69][0][][] */ 43,10,42,-20,-9,-42,-55,31,-17,127,-30,7,-9,36,75,-26, 
  /* [70][0][][] */ 42,-14,-23,63,-107,24,-14,-88,96,127,22,52,56,-47,-12,24, 
  /* [71][0][][] */ 119,-85,75,100,-89,-42,47,-21,127,14,-55,47,78,-77,23,20, 
  /* [72][0][][] */ -3,-40,44,117,51,9,-127,88,94,-13,41,4,-53,-77,-70,90, 
  /* [73][0][][] */ 69,13,68,-127,75,-97,-80,61,-15,116,-31,10,13,-78,24,-35, 
  /* [74][0][][] */ 84,8,32,46,-127,-30,42,-2,-75,-42,16,-42,30,-68,4,24, 
  /* [75][0][][] */ 92,127,-102,23,62,64,-25,-38,-14,-31,51,81,-117,52,66,81, 
  /* [76][0][][] */ -64,-39,2,-44,-53,-3,84,-5,-59,21,94,51,-49,-127,-27,81, 
  /* [77][0][][] */ -52,127,-28,18,-57,-67,41,73,36,-55,-15,72,-29,62,-1,76, 
  /* [78][0][][] */ 127,45,-64,29,-78,46,-118,-17,-4,-24,-76,1,29,-111,36,68, 
  /* [79][0][][] */ -69,-36,127,51,-32,-91,-49,-55,-21,31,11,6,-60,126,-57,82, 
  /* [80][0][][] */ 65,99,25,-127,-17,33,95,-30,14,16,-40,29,78,-56,11,2, 
  /* [81][0][][] */ 45,-59,9,-116,89,50,-4,127,109,21,-14,-56,-21,15,-82,-62, 
  /* [82][0][][] */ 89,39,83,3,127,-113,23,53,8,118,-36,21,-5,-55,31,-100, 
  /* [83][0][][] */ -44,75,21,15,101,57,127,110,0,55,-37,-78,-89,94,-67,-103, 
  /* [84][0][][] */ 10,-108,-5,105,6,-100,-98,37,-87,68,-65,-11,-127,65,-19,-56, 
  /* [85][0][][] */ -96,46,-36,-14,-12,-49,-43,-31,-6,36,10,-74,-127,-92,-76,41, 
  /* [86][0][][] */ -12,64,92,114,36,-35,59,18,9,21,-51,-82,33,82,-127,-67, 
  /* [87][0][][] */ -16,50,127,-27,-104,-28,20,16,32,-26,14,43,-51,22,-7,-3, 
  /* [88][0][][] */ -33,-65,-118,23,36,44,0,17,-24,-84,-111,-104,127,-12,11,40, 
  /* [89][0][][] */ 33,23,15,-122,2,-61,-51,46,127,-18,27,-103,3,-39,54,-75, 
  /* [90][0][][] */ 4,67,22,13,-39,33,34,111,2,-53,-9,127,51,16,-41,74, 
  /* [91][0][][] */ -61,-4,-12,62,89,44,-46,-119,-34,43,-10,21,-98,-127,-69,-25, 
  /* [92][0][][] */ -23,69,-4,-21,-127,7,-75,45,-32,60,90,65,-8,-19,54,15, 
  /* [93][0][][] */ 102,45,96,45,-127,-78,17,28,-20,-61,-23,-66,26,-53,-7,2, 
  /* [94][0][][] */ -32,-127,24,-105,12,39,-20,1,82,-24,4,58,14,56,-50,40, 
  /* [95][0][][] */ -39,-68,-21,-65,127,107,-40,40,94,53,-83,65,-40,119,-89,40, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0015890443464741111, 0.0013225154252722859, 0.002092285081744194, 0.0025591196026653051, 0.0020571760833263397, 0.0010320006404072046, 0.0014035362983122468, 0.0030931483488529921, 0.0022794166579842567, 0.0011879283702000976, 0.0028685720171779394, 0.0015934886178001761, 0.0016612040344625711, 0.0017937732627615333, 0.0025138445198535919, 0.0018787988228723407, 0.0026724755298346281, 0.0012908371863886714, 0.0021246091928333044, 0.0019797109998762608, 0.0020551204215735197, 0.0010655903024598956, 0.0014713185373693705, 0.002009115181863308, 0.0021968293003737926, 0.0019277515821158886, 0.00088132242672145367, 0.0015372250927612185, 0.0020889013539999723, 0.0023744914215058088, 0.0013954436872154474, 0.0018147708615288138, 0.0010879398323595524, 0.0028170337900519371, 0.0022831733804196119, 0.0019957493059337139, 0.0024080472066998482, 0.0014770596753805876, 0.002295604906976223, 0.0019754169043153524, 0.0022115753963589668, 0.0031859911978244781, 0.0034030769020318985, 0.0030479850247502327, 0.0035354285500943661, 0.0033039746340364218, 0.0018564171623438597, 0.0023153990041464567, 0.0021122968755662441, 0.0029261268209666014, 0.0015245556132867932, 0.0023320314940065145, 0.001977632287889719, 0.0024152342230081558, 0.00274438108317554, 0.0025415008421987295, 0.0022866553626954556, 0.0019526217365637422, 0.0014011232415214181, 0.0022097053006291389, 0.0033762366510927677, 0.001486745779402554, 0.0017170502105727792, 0.0021973247639834881, 0.0018168485257774591, 0.0012805914739146829, 0.0017169195925816894, 0.0023061621468514204, 0.0014383300440385938, 0.0024590028915554285, 0.0018285994883626699, 0.0017555413069203496, 0.0015438664704561234, 0.00169187574647367, 0.0024589758832007647, 0.0016440058825537562, 0.0032257484272122383, 0.00260369130410254, 0.0018394280923530459, 0.0016159387305378914, 0.0024142775218933821, 0.0019383842591196299, 0.0011422861134633422, 0.0018893147353082895, 0.0016286785248667002, 0.0023520730901509523, 0.0021265584509819746, 0.0038293097168207169, 0.0007931138388812542, 0.0026007308624684811, 0.0033929315395653248, 0.0021074558608233929, 0.0010591387981548905, 0.0024012122303247452, 0.002897217171266675, 0.0019723956938832998, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -28757, -8891, 5529, -12418, 13332, -15472, 26769, -9166, 10601, -8144, 14822, 13191, -1857, -32045, -1462, 6882, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.8169210862834007e-05, 5.2615941967815161e-05, 6.0928425227757543e-05, 5.1316852477611974e-05, 8.154949318850413e-05, 0.00012971066462341696, 4.8281257477356121e-05, 5.1120758143952116e-05, 9.4022761913947761e-05, 8.1222926382906735e-05, 0.00010375838610343635, 6.7258486524224281e-05, 7.131596066756174e-05, 6.9840512878727168e-05, 6.0417038184823468e-05, 6.7824403231497854e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 18,26,15,22,-17,-72,-10,-5,-19,-75,10,-8,60,-70,53,30,-83,-33,40,10,84,23,-68,7,-13,68,127,67,14,74,61,-39,3,1,4,-26,27,26,-8,-12,114,20,20,-16,-4,-6,8,-37,26,-32,95,-3,-66,-8,44,31,-10,-36,6,17,-13,32,-61,-17,16,0,66,35,6,-25,27,22,7,35,13,31,52,-38,47,22,-10,44,38,38,-51,7,-13,68,14,10,-94,-19,24,8,112,74, 
  /* [1][0][][] */ 15,38,-49,-20,-2,-47,98,-72,-64,-39,-60,-42,-6,-48,-5,-54,-33,-22,-38,-13,-15,-90,119,-31,-3,16,8,60,-49,8,-34,17,-33,30,20,11,-25,63,-62,81,37,11,-2,-45,59,-59,-10,37,-86,3,58,-107,-38,38,69,68,35,32,-74,15,-45,6,-11,-19,38,29,112,15,-40,-127,14,6,21,68,-17,42,-55,-38,112,-25,47,-8,61,-58,-28,-58,-23,16,-25,-46,28,-1,73,-54,-35,61, 
  /* [2][0][][] */ 9,-19,14,-7,70,49,-55,19,-63,47,14,-24,30,-6,16,27,26,-26,-127,-14,-14,-40,-14,21,4,-21,-45,20,-40,-23,-15,68,-18,-42,-8,18,-42,25,-20,-21,68,11,8,39,1,54,8,-13,-90,1,-23,22,-24,54,8,-66,40,19,47,36,-21,-16,-20,54,36,-9,-40,-5,-4,-10,-18,-34,26,49,25,66,-57,-4,-31,-39,33,35,51,-17,-16,-43,-9,-53,-18,-32,-12,66,-6,-12,85,-42, 
  /* [3][0][][] */ 39,-44,-26,-119,-2,-26,113,-34,22,127,-82,-13,5,-21,-24,67,59,40,-23,14,-47,24,26,3,-48,75,48,-4,-48,-15,-64,61,0,-26,26,-21,5,-58,-23,62,4,9,-15,23,55,-56,-2,31,52,-30,25,-35,109,45,27,-9,-1,-24,-13,-44,-35,33,67,-4,-37,-31,121,-39,-43,-21,-56,23,19,-77,6,-82,20,-46,126,-7,-12,-60,-41,-52,-34,-44,79,79,-47,51,-57,-1,4,-86,-25,39, 
  /* [4][0][][] */ -34,77,33,19,-14,10,-42,-21,19,-33,6,-14,22,42,-22,20,-7,-42,-13,-71,25,-39,-64,20,-32,-36,-19,17,-36,127,-57,-15,4,-42,2,-31,73,48,-36,3,20,12,18,-45,-54,-7,57,-26,24,-20,-60,-11,-71,31,42,24,8,62,-27,24,-37,-69,-26,6,59,24,-67,-5,-1,2,13,-71,-17,64,54,68,-34,19,-64,44,22,64,31,-60,41,-63,-27,-69,-37,-55,-54,-17,-1,11,37,-34, 
  /* [5][0][][] */ -7,-10,41,-19,-12,-20,-14,6,40,5,-13,0,-17,-29,26,-17,-8,1,-49,-29,-23,15,-21,11,16,-39,63,-20,-3,41,13,73,-8,-78,20,10,-35,-24,-30,0,-44,-1,-21,13,4,20,-68,23,-16,18,50,-7,26,-75,3,18,-24,-50,3,-38,36,24,25,44,-34,11,109,-18,-8,-26,16,12,-3,25,39,9,-7,-18,127,41,-20,-11,-26,29,45,63,0,88,2,-31,-10,11,10,-13,-26,22, 
  /* [6][0][][] */ 22,-61,68,18,-36,123,-47,-106,-29,-77,-87,66,3,17,-40,88,5,41,15,-45,-87,-26,-94,-68,7,-61,-9,80,-127,53,-16,-31,42,89,-15,0,4,-38,23,-23,-69,39,35,-40,18,54,-100,-14,49,7,-91,-119,82,14,-46,-26,31,-29,31,-18,-9,-53,44,-4,54,-86,-78,-68,-105,18,-21,-87,-27,-106,21,-112,88,18,-86,40,-38,90,21,-101,64,-43,-12,-4,-80,86,-85,93,43,-51,73,-109, 
  /* [7][0][][] */ -10,-14,-65,66,-26,1,43,-6,-101,4,80,59,-3,-55,-1,-40,-11,0,-2,2,-47,-21,-45,-40,70,47,-7,77,1,28,25,32,-59,-127,33,109,1,19,-37,1,-10,-8,9,-77,26,62,76,80,-21,47,-49,8,31,-41,40,-56,-14,33,-76,-19,60,3,9,-42,69,-55,103,-16,-58,-25,67,6,-17,-30,-82,-29,25,-36,93,-39,-4,-8,-76,-30,47,15,-79,46,-14,20,3,33,61,-5,93,-4, 
  /* [8][0][][] */ -12,-56,13,5,-14,-9,19,-1,-8,-8,50,43,19,26,-36,-3,73,0,11,4,-12,-72,-35,-16,-29,-34,70,4,-15,50,8,-27,-16,1,4,2,-48,-14,14,-27,-1,43,28,-35,14,-15,28,-9,34,0,52,5,-2,7,-38,2,-18,110,-64,-4,-18,-57,-58,-7,-82,-30,-16,22,-5,12,41,-18,-31,-127,44,-100,6,10,-54,22,-26,-11,4,62,67,-57,-44,51,-36,85,11,-18,-46,4,2,-59, 
  /* [9][0][][] */ -24,-28,-32,25,8,21,1,35,-47,5,61,58,-30,58,21,-50,-21,30,-18,-47,-2,39,-4,6,-21,20,6,18,30,-7,17,-13,-17,-26,2,57,-17,-4,27,-1,-15,-28,15,-1,5,45,4,37,-46,4,-19,34,125,25,-15,-1,20,-13,30,20,-33,-1,77,10,10,19,61,6,29,-11,-24,20,10,-127,-41,-124,-30,-8,37,-6,-5,30,1,-40,38,15,-51,-4,-4,112,39,29,49,32,-15,26, 
  /* [10][0][][] */ 26,39,9,-2,-13,18,-44,-24,62,11,-38,21,14,12,-8,-53,-35,-3,21,-4,20,-14,-18,-32,15,-22,-95,43,-23,52,-2,7,19,19,-22,4,15,3,6,1,36,-11,57,-45,-34,-2,18,23,16,0,8,-22,-23,-8,-6,32,-8,3,-9,-5,-10,-40,-8,11,-6,-18,-93,-31,-53,-21,40,-18,-16,29,31,14,50,-14,-94,8,-13,29,-3,-8,4,6,-66,-127,-23,26,15,20,46,-32,16,28, 
  /* [11][0][][] */ 23,-45,4,1,-60,30,9,5,73,-21,-26,-46,23,5,9,-7,-27,51,27,-64,7,35,21,-26,42,15,61,-3,30,-60,-26,11,25,103,-98,1,9,-17,53,16,-54,46,-19,20,-51,-3,-17,-10,53,-22,-23,-13,-23,17,-83,95,-29,-3,-2,-35,25,0,-13,-66,-5,-51,-127,-84,3,-40,-94,35,51,18,-8,-1,36,58,-112,-37,-10,-5,-18,-8,-22,-9,60,79,27,-48,11,2,-35,27,80,35, 
  /* [12][0][][] */ 19,25,-38,-23,19,-20,4,35,50,-34,20,1,-4,-13,-7,8,6,-41,-23,9,14,60,3,47,-36,-42,-127,-6,71,-23,34,-4,-21,-78,66,-3,36,-11,0,15,-5,-60,15,37,40,1,28,-19,-75,-6,-53,100,76,-19,28,-77,13,23,-38,-30,18,47,75,2,-18,-20,28,23,111,23,20,25,7,-19,-10,-6,-38,-54,40,-72,22,-44,28,-40,2,8,6,-107,-11,38,-42,18,13,67,12,46, 
  /* [13][0][][] */ -13,20,-76,29,29,19,-7,5,26,69,-33,40,-49,-18,62,-53,8,54,64,8,-29,-42,-7,16,47,48,-21,28,11,37,53,-17,-18,69,1,46,23,-40,-49,-53,0,-16,19,12,46,52,-27,44,-51,37,1,7,-20,-36,58,38,19,-48,-8,-11,27,22,5,-29,12,86,127,35,26,2,-51,-15,40,60,-81,56,17,-68,125,-44,-15,-30,24,1,25,57,-29,-22,-18,-26,11,51,39,11,65,54, 
  /* [14][0][][] */ -10,54,25,25,-62,-47,23,47,-74,-26,72,10,-76,-11,76,-24,-44,36,-64,28,-22,26,-100,16,-51,3,-49,-119,18,-3,34,82,-62,33,19,-17,-29,-70,-13,-44,34,-33,45,-19,-8,48,-74,31,-12,-40,90,26,-11,22,-27,35,-61,35,-1,39,41,70,-5,38,19,-47,8,-65,44,64,79,36,-52,36,15,17,24,-18,43,21,-69,119,4,-127,89,-6,-7,11,-109,-14,-26,-2,-24,18,44,39, 
  /* [15][0][][] */ 70,-37,18,27,41,12,-17,-13,17,35,-60,-19,61,66,-11,-16,-13,13,-73,49,0,-31,22,23,72,-38,85,28,41,-36,-39,62,71,51,-4,-78,62,65,67,57,84,34,-18,7,-43,-118,33,-40,-33,-25,-19,0,-10,-49,-35,48,-9,0,-9,20,8,-55,-35,34,35,42,-82,32,-4,-33,-10,-5,0,-117,-48,-102,-15,24,-127,29,77,-37,44,24,-57,0,-1,-21,39,89,16,-66,-34,-34,28,-41, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0030718343332409859, 0.0023709745146334171, 0.002745550824329257, 0.002312435070052743, 0.0036747753620147705, 0.0058450098149478436, 0.002175645437091589, 0.0023035986814647913, 0.0042368448339402676, 0.003660059766843915, 0.0046755503863096237, 0.0030307956039905548, 0.0032136330846697092, 0.0031471464317291975, 0.0027225068770349026, 0.0030562968458980322, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10733, -186, -6773, 7432, 18, -359, 922, -1615, 2878, -4781, -375, -3510, 10669, -3734, -1654, -8475, 127, 436, -10872, 525, -2483, 1503, -8586, 721, -25, 9010, -11303, -6463, -1279, -3439, -84, -640, 23227, 605, -2934, -844, -404, 16038, 4817, 12975, -422, 7629, 571, 5328, -52, -819, 9570, 1740, -6205, 113, -3465, -474, -261, -4012, -112, 3090, 1352, 3289, -161, 969, 603, 1454, -237, 8444, 10876, -533, 17951, 15025, 76, 231, 12781, -1278, -334, 1348, -3815, 335, 25013, 13748, 15320, 17502, 18538, -2205, 8354, 8796, -1255, -840, 13098, -8606, 13694, 279, -9457, -2618, 92, 2041, 27301, -2340, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 9.8875796538777649e-05, 0.00025444698985666037, 0.00013782450696453452, 0.00014654063852503896, 0.00018257342162542045, 0.00048155666445381939, 8.0201978562399745e-05, 0.00019715759844984859, 0.00029903868562541902, 0.00022545120737049729, 0.00026225100737065077, 0.00015989253006409854, 8.6151339928619564e-05, 0.00012143600906711072, 0.00021058059064671397, 0.00013388616207521409, 0.00025106844259425998, 0.00029078882653266191, 0.0001145385394920595, 0.00027950090589001775, 0.00020861002849414945, 0.00023679847072344273, 7.6286618423182517e-05, 0.00016358625725843012, 0.0016518777702003717, 0.00013413248234428465, 0.00018707070557866246, 0.00013041745114605874, 0.00026768466341309249, 0.00016739481361582875, 0.00016795715782791376, 0.00024730991572141647, 5.0913669838337228e-05, 0.00042958313133567572, 0.0001191244664369151, 0.00016759503341745585, 0.00032128865132108331, 6.405888416338712e-05, 0.00016827810031827539, 8.6777021351736039e-05, 0.00048169156070798635, 0.00014380390348378569, 0.0001994777558138594, 0.00015254932804964483, 0.00011501198605401441, 0.00024070698418654501, 0.00013511582801584154, 0.00024279564968310297, 0.000159638118930161, 0.00036311423173174262, 0.00023962472914718091, 0.00018687732517719269, 0.00011856538912979886, 0.00020996053353883326, 0.00024180857872124761, 0.00022675999207422137, 0.00016470407717861235, 0.00035727128852158785, 0.0003528454399202019, 0.00030400106334127486, 0.00023114946088753641, 0.00022905346122570336, 0.00011609176726778969, 0.00010746253974502906, 0.00021422859572339803, 0.00045243988279253244, 9.0712695964612067e-05, 9.5681054517626762e-05, 0.00018191708659287542, 0.00034980615600943565, 9.1160087322350591e-05, 0.00025462527992203832, 0.00038068476715125144, 0.00013862179184798151, 0.00013844149361830205, 0.0001687712938291952, 5.1017606892855838e-05, 0.00012002357834717259, 9.1030880867037922e-05, 0.00010812725668074563, 5.3796658903593197e-05, 0.00024306720297317952, 0.00010189204476773739, 0.00029200705466791987, 7.1748007030691952e-05, 0.00032526729046367109, 0.00010315799590898678, 0.0001999334926949814, 8.9979570475406945e-05, 0.00017666834173724055, 9.0923720563296229e-05, 0.00018985031056217849, 0.00024354913330171257, 0.00013861105253454298, 6.0737864259863272e-05, 0.00025731034111231565, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -30,-14,-2,-32,94,-2,25,-7,-5,-2,-11,-18,-26,5,-8,-15,-19,1,-7,-15,-8,26,22,40,3,-12,-32,3,20,-1,24,7,-15,0,-4,-25,0,-79,-43,1,0,-13,32,-18,-20,39,-63,-14,-26,2,-10,57,-66,2,33,-12,0,-11,7,-14,-12,-18,-4,-34,-14,-19,-44,-36,-18,24,-9,-5,39,7,-4,-2,-18,2,127,-34,-114,10,-91,-18,-26,-20,14,18,-40,-12,10,-28,-6,29,-35,10, -11,36,43,-59,-41,3,127,-49,-4,-13,-31,14,-65,6,-92,80,-12,70,69,-32,-10,127,98,116,37,-3,51,71,127,32,127,-34,-127,-21,-74,-31,-24,-82,127,-70,-25,-127,-19,-34,67,-28,-27,-3,42,1,26,127,-88,35,-82,-8,-81,-7,-3,27,-17,-127,-126,-53,-51,-1,-4,-97,-13,12,-61,102,-127,-16,7,-26,-120,-91,-5,-99,-127,8,35,-54,123,70,-74,32,-127,2,33,-11,11,127,-49,-81, -24,-1,-6,-13,61,1,43,-27,-22,14,-9,5,0,2,-9,-25,-14,-5,-22,-29,-10,4,22,26,2,-8,6,-14,12,2,14,12,-15,0,-14,61,0,-80,-40,23,-4,1,14,-8,-12,-22,-43,-23,-20,-3,-7,40,8,-8,7,-15,58,-19,10,-20,-12,-10,-55,-5,-22,-30,127,-35,-10,16,-3,6,24,3,0,21,-20,25,-45,-26,-113,5,-102,-18,7,-26,7,-24,-49,-36,13,51,3,27,-30,14, 
  /* [0][1][][] */ -92,-10,45,-51,40,105,-44,-12,-3,-15,-23,-15,-127,28,18,72,-17,38,91,18,26,-21,117,-28,42,22,59,15,-7,4,-7,-19,-113,-19,66,-17,-5,-127,-71,-127,-20,-12,91,-28,-67,127,-84,-74,55,57,10,-40,-116,64,60,-28,15,-32,38,-7,10,-11,95,-74,-33,16,-25,-76,-16,-5,-127,13,84,127,11,-78,-127,-71,-65,-61,-78,-5,-23,-50,46,19,-110,60,-68,127,85,-77,127,-1,-74,-1, 78,127,127,127,-127,-127,104,-54,127,127,-71,-56,-86,127,-28,127,127,-127,127,127,127,-90,95,-127,-127,-127,127,127,-116,127,-22,127,-77,127,127,-102,127,82,-1,-30,127,-10,-127,-102,127,-26,127,127,127,-127,127,-115,108,127,-127,127,-127,127,-127,127,-118,111,100,-127,127,127,-15,127,-117,-127,-25,-127,23,119,127,74,4,-127,92,-127,47,127,127,127,127,62,-127,127,-87,49,-11,-21,-98,-30,-127,-27, -127,-32,39,-57,3,62,-61,3,-39,-14,0,127,-108,24,21,51,-25,47,66,1,12,-29,76,-26,44,10,38,1,-7,-4,10,-15,-92,-35,80,127,1,-105,-87,-71,-28,-22,27,-31,-60,-63,-74,-105,42,63,-8,-24,127,12,89,-47,82,-30,53,-36,-5,-34,-127,-32,-71,-8,-54,-80,-24,4,-111,-3,44,-100,5,127,-100,-46,-56,-5,-100,-11,-55,-66,4,27,-90,42,-42,-74,127,127,-48,-27,-76,-4, 
  /* [0][2][][] */ -30,-44,-14,-17,30,1,-12,23,-11,11,32,-23,57,-5,-10,-29,-2,-4,-48,-25,-16,-12,18,-26,6,-4,-8,9,4,-12,-23,5,2,-4,-1,-19,0,-38,-25,-3,-26,6,21,14,27,14,-52,4,-31,1,-25,-13,-4,-28,28,-14,12,-22,9,-15,-6,13,-2,1,-35,-19,114,9,23,24,-11,4,0,-18,-10,-27,-29,13,-32,-34,-35,7,-82,-18,-6,-4,36,-16,7,0,-3,-15,-16,-17,-36,1, -34,-60,29,-82,-43,2,54,127,-58,70,127,-21,-50,16,127,85,-11,-32,72,-54,-25,-40,127,8,23,-10,31,19,-8,1,-84,-48,-77,-34,-89,-4,-86,-100,44,-71,-19,-118,-44,127,30,-19,-37,-3,27,-11,-15,-11,54,32,-52,-41,-50,-52,47,-48,127,20,106,7,-90,-50,-25,-66,127,27,-45,19,32,-28,16,-29,-32,-45,-1,34,-109,-18,-86,-65,46,-127,-12,12,-16,3,44,2,13,-126,-70,127, -25,4,-11,-5,20,-7,-5,17,-23,2,15,41,66,-4,-10,-40,-5,10,-23,-34,-15,-7,6,-15,2,-7,-16,-3,1,-6,-29,2,0,-1,2,3,-3,-60,-30,11,-30,-7,-5,11,22,-3,-53,9,-28,-6,-18,-11,-4,-33,25,-16,53,-15,15,-18,-1,12,-8,17,-30,-22,-27,16,20,12,-20,3,-43,-36,-12,-17,-39,2,95,-20,-27,1,-56,-1,-12,3,42,6,7,1,-5,18,-1,-24,-15,-3, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0053559448570013046, 0.013782988302409649, 0.0074657346121966839, 0.0079378737136721611, 0.0098897116258740425, 0.026085158810019493, 0.0043444135226309299, 0.010679713450372219, 0.016198450699448586, 0.012212333269417286, 0.014205719344317913, 0.0086611239239573479, 0.0046666809357702732, 0.0065779956057667732, 0.011406815610826015, 0.007252400740981102, 0.01359997782856226, 0.015751568600535393, 0.0062043704092502594, 0.015140119940042496, 0.011300073936581612, 0.012826996855437756, 0.0041323248296976089, 0.008861207403242588, 0.089479595422744751, 0.0072657433338463306, 0.010133322328329086, 0.0070645059458911419, 0.01450005266815424, 0.009067511186003685, 0.0090979719534516335, 0.013396384194493294, 0.0027579125016927719, 0.023269835859537125, 0.0064527830109000206, 0.0090783564373850822, 0.017403695732355118, 0.0034699677489697933, 0.0091153569519519806, 0.0047005731612443924, 0.026092465966939926, 0.0077896285802125931, 0.010805392637848854, 0.0082633541896939278, 0.0062300162389874458, 0.013038714416325092, 0.0073190098628401756, 0.013151854276657104, 0.0086473431438207626, 0.019669320434331894, 0.012980090454220772, 0.010122847743332386, 0.0064224987290799618, 0.011373228393495083, 0.013098386116325855, 0.01228322833776474, 0.008921758271753788, 0.01935281790792942, 0.019113076850771904, 0.016467254608869553, 0.01252099871635437, 0.012407462112605572, 0.006288506556302309, 0.0058210748247802258, 0.011604422703385353, 0.024507949128746986, 0.0049137626774609089, 0.0051828906871378422, 0.0098541593179106712, 0.018948443233966827, 0.0049379970878362656, 0.013792646117508411, 0.020621089264750481, 0.0075089223682880402, 0.0074991555884480476, 0.0091420728713274002, 0.0027635425794869661, 0.006501486524939537, 0.0049309981986880302, 0.0058570816181600094, 0.0029140794649720192, 0.013166563585400581, 0.0055193300358951092, 0.015817558392882347, 0.0038864754606038332, 0.017619211226701736, 0.0055879047140479088, 0.010830079205334187, 0.0048740501515567303, 0.0095698432996869087, 0.004925193265080452, 0.010283889248967171, 0.013192669488489628, 0.0075083402916789055, 0.0032900734804570675, 0.01393809262663126, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1672, 8857, 361, 2543, 6143, 24170, 146, 2619, 16294, -1300, 26350, 5755, 2102, 743, 8890, 438, 4193, 7188, -352, 19426, 1537, 12726, -1707, 2480, -12716, 2068, 3442, 2342, 8843, 1733, 5972, 5005, 2676, 16562, 5086, 6685, 5261, 2754, 6002, 4173, 24261, 2142, 3250, 2050, 4561, 15946, 9029, 11870, 1728, -1391, 2610, 9039, 3781, -4833, 10414, 245, 3993, 18987, 1990, 2478, 4163, 13594, 4960, -539, 23274, 16267, 2738, 5730, 8179, 6743, 4019, 2247, -7651, 5890, 2574, 4548, 607, 13148, 5463, 10762, 3376, 1619, 5760, 24113, -130, 13655, 7918, 2535, -975, 3546, 2164, 15819, 3838, 3553, 6347, 7018, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018592068227007985, 8.8615539425518364e-05, 0.00022087174875196069, 0.0001431424607289955, 0.00010904095688601956, 3.8716985727660358e-05, 0.0001979693042812869, 0.00011787370021920651, 5.3018036851426587e-05, 0.00012560417235363275, 3.2790638215374202e-05, 8.1867830886039883e-05, 0.00014002971875015646, 0.00023558140674140304, 6.4109452068805695e-05, 0.00010393535194452852, 0.00013862803461961448, 8.7889588030520827e-05, 0.00011197830463061109, 4.5017939555691555e-05, 0.00016477172903250903, 6.1319551605265588e-05, 0.00014254928100854158, 0.00010031097917817533, 5.7540444686310366e-05, 9.2416397819761187e-05, 0.00013906350068282336, 0.00015405679005198181, 9.9966455309186131e-05, 0.00015260661893989891, 9.9518627393990755e-05, 0.00011071318294852972, 0.00015845743473619223, 5.0703802116913721e-05, 0.00010034704610006884, 9.2063579359091818e-05, 0.00010768992797238752, 0.00015011343930382282, 8.3080893091391772e-05, 0.00010559921793173999, 3.8359608879545704e-05, 0.00013165264681447297, 0.00011747996177291498, 8.7866683315951377e-05, 8.453779446426779e-05, 5.2980169130023569e-05, 7.6319818617776036e-05, 6.3855492044240236e-05, 0.00015824094589333981, 0.0001520227815490216, 0.00015943597827572376, 7.6882992289029062e-05, 0.00012561166658997536, 8.5143401520326734e-05, 7.1353133535012603e-05, 0.0002525060554035008, 8.8660475739743561e-05, 4.7449244448216632e-05, 9.8486489150673151e-05, 0.00011608731438172981, 0.00010838728485396132, 6.4370535255875438e-05, 0.00012215197784826159, 0.00012358084495645016, 4.0247196011478081e-05, 5.407915887190029e-05, 0.00015569300740025938, 0.00010457252938067541, 9.5894574769772589e-05, 7.8095108619891107e-05, 0.00012657948536798358, 9.5570125267840922e-05, 7.6066586188971996e-05, 0.00011087465099990368, 0.00014487458975054324, 0.00014178444689605385, 0.00013742780720349401, 6.1468301282729954e-05, 0.00010915259190369397, 7.9774225014261901e-05, 0.0001262439473066479, 9.7097574325744063e-05, 8.5056628449819982e-05, 4.0107199311023578e-05, 9.7983676823787391e-05, 5.4169675422599539e-05, 8.755430462770164e-05, 0.00016195123316720128, 0.00013134766777511686, 0.00015719504153821617, 0.00010485450911801308, 5.3852130804443732e-05, 0.00013254184159450233, 0.00011437232751632109, 8.5311119619291276e-05, 9.0760295279324055e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 33,6,-1,50,-127,-14,98,49,58,76,-22,33,9,-3,38,84, 
  /* [1][0][][] */ -19,30,-94,-1,127,104,0,-4,-29,17,-59,34,-56,82,-54,-40, 
  /* [2][0][][] */ -36,58,77,0,64,85,6,37,40,-7,38,-20,55,-127,-7,9, 
  /* [3][0][][] */ 127,-35,26,-2,34,38,-9,10,42,34,-63,-26,-44,48,-33,53, 
  /* [4][0][][] */ -83,-12,0,30,-116,-2,-79,-29,-13,26,-4,-51,-23,39,-47,127, 
  /* [5][0][][] */ -98,16,29,9,127,35,10,6,-52,29,-24,9,-60,54,-102,-36, 
  /* [6][0][][] */ -127,26,-36,27,-11,-65,75,13,11,-34,-47,34,15,-3,-37,13, 
  /* [7][0][][] */ -3,100,63,-104,72,49,127,8,53,1,-10,43,97,21,-34,-3, 
  /* [8][0][][] */ -31,-29,-75,60,-56,87,-47,-69,30,-46,87,42,127,44,-99,10, 
  /* [9][0][][] */ -23,-127,-13,73,-34,-66,-18,51,49,51,3,63,-80,18,-15,-40, 
  /* [10][0][][] */ -43,-55,-107,51,-127,126,61,-88,12,-74,63,-50,41,113,-88,86, 
  /* [11][0][][] */ -49,-119,-47,26,-14,104,44,-7,10,11,49,-100,22,117,-122,127, 
  /* [12][0][][] */ -38,-102,-91,107,-114,-127,24,66,84,66,-31,104,-2,-72,-20,-3, 
  /* [13][0][][] */ -58,-25,-29,-2,-10,-2,26,13,-15,127,-13,-18,33,32,11,-16, 
  /* [14][0][][] */ -127,-28,-50,-61,-22,95,-16,-109,127,-69,67,-6,94,-58,-96,-89, 
  /* [15][0][][] */ 5,-127,97,-57,-56,-35,8,61,18,-53,-92,-38,88,-43,-26,-47, 
  /* [16][0][][] */ -25,-32,23,-35,28,24,-21,-20,61,-127,41,-19,-8,3,-75,-86, 
  /* [17][0][][] */ -21,11,25,-67,16,1,-32,2,94,-72,32,68,126,-85,-29,-127, 
  /* [18][0][][] */ 66,4,-41,-127,5,-21,126,-54,21,58,-14,56,-9,79,-14,-119, 
  /* [19][0][][] */ -43,-24,-39,-73,-117,47,-10,6,26,-55,34,-127,-17,-13,-23,4, 
  /* [20][0][][] */ 12,76,70,-97,61,0,-45,83,-101,-127,38,-85,-43,102,-18,-13, 
  /* [21][0][][] */ 18,-91,-127,-2,81,42,90,88,-84,-94,-12,19,94,-108,-29,33, 
  /* [22][0][][] */ 65,-14,86,-8,7,11,64,31,30,127,28,24,-4,1,117,-6, 
  /* [23][0][][] */ -115,-68,-25,69,63,46,17,4,-10,6,1,-90,-5,63,66,127, 
  /* [24][0][][] */ 14,-14,32,32,19,-92,11,-59,20,127,-111,78,-18,-60,78,-71, 
  /* [25][0][][] */ 125,-62,102,127,38,9,-17,37,-123,76,59,-57,-10,25,77,-11, 
  /* [26][0][][] */ -23,28,9,40,-62,121,-15,38,-60,-41,-80,31,5,18,50,-127, 
  /* [27][0][][] */ 41,-9,-4,-47,-44,-2,-89,16,-108,-20,-75,-42,-78,51,-26,127, 
  /* [28][0][][] */ -59,13,18,3,20,-14,-127,3,-8,-32,-3,-9,11,-52,-66,-35, 
  /* [29][0][][] */ -24,-120,-31,98,-33,8,127,4,77,57,-115,64,32,-28,-54,75, 
  /* [30][0][][] */ 43,-47,-66,12,-127,26,49,-31,10,-6,7,-23,-19,52,-6,77, 
  /* [31][0][][] */ -127,-15,11,98,-33,4,-55,4,-27,-51,10,-24,-21,-50,-23,95, 
  /* [32][0][][] */ -127,-74,-98,-4,-99,-45,9,-16,115,49,-51,-73,41,44,35,-10, 
  /* [33][0][][] */ -14,14,-95,33,-127,-90,58,-12,-116,15,-50,-54,-29,97,70,72, 
  /* [34][0][][] */ 31,59,0,41,-66,-47,36,12,22,-127,-16,38,-29,5,45,99, 
  /* [35][0][][] */ 40,-10,-74,-22,-127,18,99,-32,28,50,-8,-12,24,70,27,68, 
  /* [36][0][][] */ -2,-6,-51,59,127,-22,39,63,-78,18,-85,-84,24,-23,5,25, 
  /* [37][0][][] */ -126,53,-4,-76,47,-88,-39,-43,-11,-26,-29,47,60,-81,11,-127, 
  /* [38][0][][] */ 37,102,33,-72,-108,-66,-127,-55,-53,-70,45,64,-75,-102,89,-6, 
  /* [39][0][][] */ -6,-48,1,71,7,89,94,-59,-34,48,21,-32,-22,127,51,127, 
  /* [40][0][][] */ 116,45,91,106,-54,-60,-9,20,-77,72,-15,-24,-42,-29,127,-5, 
  /* [41][0][][] */ -25,-8,8,51,-94,114,2,54,-58,30,-114,13,20,35,51,-127, 
  /* [42][0][][] */ 4,-100,21,-20,127,36,69,15,-30,-106,-90,-23,-17,-7,-14,41, 
  /* [43][0][][] */ -46,-109,-48,13,123,18,-4,96,-81,-77,-127,-98,120,-15,-67,58, 
  /* [44][0][][] */ -43,-54,-78,-84,31,73,72,22,-37,-127,-61,70,-41,59,34,110, 
  /* [45][0][][] */ -11,-60,-73,-11,-127,75,-21,-61,54,-49,26,-54,2,19,-41,49, 
  /* [46][0][][] */ 33,-85,-7,1,83,-78,-24,85,0,-22,30,60,-52,-60,53,-127, 
  /* [47][0][][] */ -72,-31,-5,94,-8,2,32,45,4,127,82,95,-43,78,-4,96, 
  /* [48][0][][] */ 44,-15,-84,-91,35,-62,10,53,48,-81,-2,20,-57,4,-46,-127, 
  /* [49][0][][] */ 50,37,7,31,-7,-23,50,39,-35,127,-41,32,-42,-23,68,86, 
  /* [50][0][][] */ 6,-2,12,14,-127,-16,-10,-49,56,18,22,48,-18,-61,16,-5, 
  /* [51][0][][] */ 15,-1,-18,-127,-31,98,49,-50,4,-1,38,-47,63,68,-26,19, 
  /* [52][0][][] */ 24,-29,6,-82,92,-121,-16,-36,41,5,127,-55,38,12,-41,92, 
  /* [53][0][][] */ -44,-64,51,-25,-37,-127,16,-93,-6,91,-96,74,-39,-19,32,-80, 
  /* [54][0][][] */ 67,63,44,-16,-127,-47,-99,-104,-7,17,51,72,-78,-50,63,12, 
  /* [55][0][][] */ 17,12,-36,66,-37,25,40,-22,1,127,18,54,-2,-3,-1,42, 
  /* [56][0][][] */ 40,-117,-89,83,-84,50,1,73,127,3,67,54,-30,-28,48,102, 
  /* [57][0][][] */ 46,22,96,-92,82,0,-12,1,93,-40,13,127,54,-62,102,-58, 
  /* [58][0][][] */ 85,-60,20,-71,39,12,-4,127,57,103,-5,70,56,19,94,-12, 
  /* [59][0][][] */ -43,37,37,-45,5,-86,-1,7,10,23,-118,-98,-127,-58,71,-17, 
  /* [60][0][][] */ 37,-28,28,15,16,-16,17,-54,25,127,-17,57,-13,-29,-23,-35, 
  /* [61][0][][] */ 60,52,19,-20,-77,-127,-24,-53,-59,-9,-27,13,-59,-38,89,82, 
  /* [62][0][][] */ -24,85,-35,46,-52,127,-53,26,-56,14,-47,39,-34,48,59,-97, 
  /* [63][0][][] */ 31,-2,-70,-127,-21,-45,85,-19,-2,-101,-26,29,-40,69,37,-31, 
  /* [64][0][][] */ -40,23,4,-31,48,-57,37,92,-127,-24,-70,-46,-27,77,66,70, 
  /* [65][0][][] */ -59,-12,-36,-16,73,31,-50,-82,-127,-45,5,-23,-123,101,-49,44, 
  /* [66][0][][] */ -18,59,-9,35,-45,127,-23,24,-64,21,-32,44,-33,52,46,-85, 
  /* [67][0][][] */ 22,-27,-46,-32,12,-84,65,-98,-2,25,14,127,-62,-35,-25,-125, 
  /* [68][0][][] */ 3,-127,-25,72,-8,2,21,89,36,34,48,6,-72,29,-17,-6, 
  /* [69][0][][] */ 17,82,93,-110,51,-2,-39,102,41,105,53,88,91,-104,38,-127, 
  /* [70][0][][] */ 49,25,47,-35,103,3,-98,-46,-127,-86,-6,50,-27,66,-99,-6, 
  /* [71][0][][] */ -22,-67,21,-43,71,-9,47,29,-93,75,-127,-52,18,93,-24,51, 
  /* [72][0][][] */ 15,14,68,15,-55,-23,-116,-64,-3,70,-23,70,22,119,-127,-7, 
  /* [73][0][][] */ 3,-34,-21,-43,37,-112,35,-52,74,86,112,-9,25,-26,-67,127, 
  /* [74][0][][] */ 6,-1,-28,82,-83,1,90,22,79,58,30,108,127,19,-55,7, 
  /* [75][0][][] */ -27,45,-24,34,-54,127,-17,16,-31,28,-34,45,-20,45,30,-69, 
  /* [76][0][][] */ -78,95,-61,50,-123,-5,-5,27,53,45,-46,-47,55,-52,-127,44, 
  /* [77][0][][] */ 106,113,-113,127,78,68,72,46,39,17,100,-32,87,40,62,18, 
  /* [78][0][][] */ 11,-40,-4,-58,71,-127,33,-52,46,45,126,-31,10,-15,-41,126, 
  /* [79][0][][] */ -36,59,8,18,3,-52,-39,-1,-127,-1,49,13,102,46,-83,-48, 
  /* [80][0][][] */ -78,19,77,-5,60,54,-2,-127,-69,53,-67,-53,-1,-99,21,58, 
  /* [81][0][][] */ 86,80,-23,-1,31,-28,80,109,-111,127,-70,-46,-48,19,116,121, 
  /* [82][0][][] */ 57,103,-26,-69,-4,-50,105,-103,32,27,-72,61,127,-27,65,-54, 
  /* [83][0][][] */ 0,-32,14,25,-3,29,-27,-107,65,-40,106,19,41,-65,-59,-127, 
  /* [84][0][][] */ -127,-90,-48,-20,-10,106,94,-3,82,66,103,96,57,84,-84,14, 
  /* [85][0][][] */ 110,9,90,-81,77,-4,-26,80,11,127,-61,10,-42,67,114,13, 
  /* [86][0][][] */ -87,73,-36,2,38,86,16,16,94,49,127,-25,-31,73,-18,-25, 
  /* [87][0][][] */ 11,-59,25,-48,43,-127,30,-31,48,-13,69,-38,38,-45,-38,73, 
  /* [88][0][][] */ -90,65,39,-4,111,-28,40,17,-66,-80,110,-78,72,124,106,-127, 
  /* [89][0][][] */ -25,35,-9,32,-29,127,-22,34,-45,16,-46,22,-9,64,25,-94, 
  /* [90][0][][] */ 52,-79,30,22,127,-9,41,28,-10,-85,-119,-21,-19,-7,-60,24, 
  /* [91][0][][] */ -11,65,-22,-35,7,-93,-111,40,-84,28,-112,-127,-123,-82,-2,20, 
  /* [92][0][][] */ 64,44,63,40,-127,-93,13,14,-25,32,-29,-39,-29,-78,22,-3, 
  /* [93][0][][] */ -9,-127,-120,71,-49,-52,-13,116,96,64,13,69,-67,61,-15,-28, 
  /* [94][0][][] */ 100,11,127,-28,18,-31,19,36,32,81,2,57,16,2,124,-11, 
  /* [95][0][][] */ -51,-46,-17,-19,127,-10,37,74,-27,-5,-104,-49,16,11,-62,21, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0048173009417951107, 0.0022960742935538292, 0.005722900852560997, 0.0037088948301970959, 0.0028253074269741774, 0.0010031770216301084, 0.0051294867880642414, 0.0030541683081537485, 0.0013737246626988053, 0.0032544687855988741, 0.00084962235996499658, 0.0021212378051131964, 0.0036282422952353954, 0.0061040357686579227, 0.0016611090395599604, 0.0026930186431854963, 0.0035919239744544029, 0.002277264604344964, 0.0029014155734330416, 0.0011664379853755236, 0.0042693205177783966, 0.0015888212947174907, 0.0036935252137482166, 0.0025991091970354319, 0.0014909026212990284, 0.0023945565335452557, 0.0036032069474458694, 0.0039916909299790859, 0.0025901824701577425, 0.0039541162550449371, 0.0025785788893699646, 0.0028686355799436569, 0.0041057136841118336, 0.0013137616915628314, 0.0026000437792390585, 0.0023854149039834738, 0.0027903015725314617, 0.00388951669447124, 0.0021526687778532505, 0.0027361302636563778, 0.00099391723051667213, 0.0034111877903342247, 0.0030439663678407669, 0.0022766711190342903, 0.002190417842939496, 0.0013727435143664479, 0.0019774858374148607, 0.0016545286634936929, 0.0041001043282449245, 0.0039389887824654579, 0.0041310684755444527, 0.0019920780323445797, 0.0032546631991863251, 0.0022061094641685486, 0.0018487964989617467, 0.0065425620414316654, 0.0022972386796027422, 0.0012294343905523419, 0.0025518357288092375, 0.0030078822746872902, 0.0028083703946322203, 0.0016678738174960017, 0.0031650206074118614, 0.0032020434737205505, 0.001042825635522604, 0.0014012189349159598, 0.0040340861305594444, 0.0027095281984657049, 0.0024846778251230717, 0.0020234845578670502, 0.0032797397579997778, 0.0024762712419033051, 0.001970924437046051, 0.0028728193137794733, 0.0037537754978984594, 0.0036737080663442612, 0.0035608254838734865, 0.0015926753403618932, 0.0028281998820602894, 0.0020669912919402122, 0.0032710456289350986, 0.0025158482603728771, 0.0022038610186427832, 0.0010391982505097985, 0.0025388076901435852, 0.0014035642379894853, 0.0022685772273689508, 0.0041962401010096073, 0.003403285751119256, 0.0040730047039687634, 0.0027168344240635633, 0.0013953364687040448, 0.0034342273138463497, 0.0029634460806846619, 0.0022104550153017044, 0.0023516460787504911, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -6091, 11539, -20657, 2708, 14875, -17162, -43889, -9058, -7726, 9332, -17524, -14748, 6981, -10181, -4733, -2707, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00012096834689145908, 0.00014022120740264654, 0.00012753547343891114, 0.00016579231305513531, 8.9207671408075839e-05, 0.00013159208174329251, 8.709194662515074e-05, 0.00010797597497003153, 8.5970576037652791e-05, 8.7508902652189136e-05, 0.00016873551066964865, 0.00014335254672914743, 0.00012911288649775088, 7.6185824582353234e-05, 0.00014296140579972416, 0.00011838552745757625, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 23,39,20,-34,70,68,-42,56,-17,117,7,50,-34,33,-18,44,38,84,46,-60,-72,79,-11,50,60,49,41,55,-46,-46,-5,83,-25,8,-72,50,52,-127,-32,16,14,-30,64,-10,-11,-59,-62,-14, 
  /* [1][0][][] */ -52,4,-80,-45,13,91,-58,20,-12,-32,-44,33,57,-19,-28,-26,-27,-34,-3,22,-63,45,-101,-44,-50,-38,50,68,-25,-30,40,-43,15,-56,-31,51,12,-59,127,-33,-23,29,-42,-17,36,50,30,19, 
  /* [2][0][][] */ 5,2,55,-30,-20,-76,19,25,101,72,-66,9,107,-46,127,83,-71,-23,-27,29,83,-80,-30,-94,9,-39,32,-69,38,40,-46,15,29,-26,60,40,-67,7,3,-32,30,28,61,-18,18,-83,93,-58, 
  /* [3][0][][] */ 43,2,-25,-26,32,111,19,-16,47,-52,21,-28,-50,10,13,45,-47,-71,37,-127,-11,1,-24,-19,-40,90,126,63,-15,-45,25,43,62,-32,94,37,-42,-61,-2,38,27,12,-17,2,26,19,-12,-25, 
  /* [4][0][][] */ 103,-5,8,-53,91,84,47,13,71,-19,-110,28,44,-24,14,-13,-103,-127,-29,-96,-26,26,-39,-31,-83,126,-101,122,-61,-59,26,83,43,-49,18,-30,-5,11,-31,33,-48,-14,-4,56,-55,104,-32,-52, 
  /* [5][0][][] */ 1,-4,-56,8,-15,54,19,-25,61,51,39,87,53,-21,32,-5,-39,127,-15,35,10,0,-65,-15,36,-1,-62,-37,-16,27,20,-17,-36,3,38,16,-45,9,-85,5,87,-21,26,47,-14,8,-39,33, 
  /* [6][0][][] */ 62,14,13,71,2,-26,100,-51,-1,62,127,105,40,48,-53,58,42,-40,-78,83,50,-64,-41,61,-87,86,87,-6,114,49,-26,2,92,-60,-114,-7,95,32,2,-1,10,57,52,-33,63,120,35,-3, 
  /* [7][0][][] */ -92,-6,-24,28,-57,-55,24,52,82,111,-54,-74,-101,14,-16,-13,-80,99,1,117,-47,39,25,40,-22,-95,-32,-78,27,38,-6,8,-20,10,15,-19,2,-61,127,9,5,44,20,-14,55,68,-27,-2, 
  /* [8][0][][] */ -15,-94,52,-62,61,-60,73,-42,-32,-119,34,16,-35,-1,26,25,3,12,-42,106,6,39,-25,31,69,-7,-58,-35,-127,-19,-51,-118,14,-63,6,82,-8,38,113,21,16,1,72,116,-10,-68,-42,86, 
  /* [9][0][][] */ 24,-40,22,-61,38,80,-34,51,22,-40,-39,-19,20,-45,117,-13,7,-118,35,39,-71,39,60,-37,-26,-82,-25,76,54,72,-41,-24,-54,29,-9,127,-26,-47,-59,-27,-27,-3,33,110,56,82,-70,13, 
  /* [10][0][][] */ -10,19,-23,-7,19,27,-63,-40,49,36,61,-9,-34,-7,51,-48,-62,127,1,47,2,-11,21,29,-43,41,3,93,38,4,-37,-8,70,10,-7,27,-10,-47,-37,18,-81,-2,25,-13,14,46,30,31, 
  /* [11][0][][] */ -29,49,-17,36,30,53,-2,6,19,18,-127,-68,73,17,-9,-46,0,27,-42,-43,-15,-4,103,2,50,12,-15,30,-10,28,-7,46,31,-5,-52,5,44,81,97,21,34,-32,65,-2,-56,-22,85,6, 
  /* [12][0][][] */ -64,0,32,18,-63,-55,4,5,-39,-37,-127,14,69,-97,20,34,48,104,88,-121,-29,42,-41,-78,-1,-18,38,-31,10,13,-20,76,69,80,42,-33,-55,-30,33,0,-30,16,64,-5,36,-14,-37,-36, 
  /* [13][0][][] */ -50,-112,-47,-102,7,21,55,15,-117,24,115,-67,58,48,127,10,113,19,-10,-100,74,-82,120,-1,-80,3,-27,10,-47,-103,-114,18,42,-28,-77,67,32,-61,75,-79,-9,52,66,47,57,-31,105,-69, 
  /* [14][0][][] */ 63,22,-56,7,-39,18,-89,-27,-35,59,60,51,-9,-66,10,-50,56,-111,25,13,90,-61,21,-6,-12,127,-84,6,-58,-24,-87,-1,126,40,90,-24,-84,16,-20,54,-16,-44,104,-28,-52,-45,-54,57, 
  /* [15][0][][] */ -62,14,41,19,97,5,2,36,24,78,-20,51,53,-13,-32,-15,9,35,2,-39,29,-39,-47,-52,50,-66,-41,67,-30,4,12,10,-61,1,127,-3,-87,12,61,-16,-47,-20,21,-3,-36,-31,-11,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0057513886131346226, 0.0066667576320469379, 0.0060636200942099094, 0.0078825252130627632, 0.0042413407936692238, 0.0062564895488321781, 0.0041407495737075806, 0.0051336716860532761, 0.0040874346159398556, 0.0041605737060308456, 0.0080224582925438881, 0.0068156360648572445, 0.0061386171728372574, 0.0036222224589437246, 0.0067970394156873226, 0.005628589540719986, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 15142, -412, 17642, -24, 13823, -1471, 35816, 397, 10874, 35290, 2192, 23989, 2811, 10615, 34147, 22548, 323, 117, 3581, 46744, 112, 19058, 1111, 15549, 18003, 40586, -209, -452, -383, 12163, 22047, 181, 700, 474, 1104, 16459, 9745, 30100, 1630, 18080, 28028, 341, 674, 16657, -471, 2777, 41914, 27375, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6195890617091209e-05, 9.8925207566935569e-05, 6.5224594436585903e-05, 0.00014201094745658338, 9.9877172033302486e-05, 7.4870244134217501e-05, 5.03333612869028e-05, 0.00021028310584370047, 9.4288370746653527e-05, 5.7200530136469752e-05, 6.7511391534935683e-05, 0.00010762694728327915, 6.56861302559264e-05, 0.00010195633512921631, 5.0858896429417655e-05, 8.5377178038470447e-05, 9.4725590315647423e-05, 7.0056936237961054e-05, 0.00015190933481790125, 4.7330930101452395e-05, 7.5154821388423443e-05, 6.1828970501665026e-05, 8.7106884166132659e-05, 0.00010194419155595824, 5.9485766541911289e-05, 5.3111431043362245e-05, 6.753467459930107e-05, 4.5486911403713748e-05, 0.00028385946643538773, 0.0001234129595104605, 5.8020668802782893e-05, 0.00037217314820736647, 0.00012195343151688576, 0.00019570150470826775, 9.4343173259403557e-05, 7.3094110121019185e-05, 0.00010415083670523018, 6.4782376284711063e-05, 9.2408139607869089e-05, 8.1583020801190287e-05, 5.1905200962210074e-05, 0.00015523152251262218, 0.00032958039082586765, 6.4312633185181767e-05, 0.00014353838923852891, 5.7026420108741149e-05, 4.4683281885227188e-05, 5.5534710554638878e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -100,72,-127,91,-101,69,-51,98,-90,-54,64,-45,61,-71,-50,-54,73,73,85,-107,80,-119,84,-90,-104,-59,67,121,-98,-42,-93,46,71,-89,58,-100,-69,-114,88,-47,-16,-88,121,-111,100,60,-81,-48, -118,99,-73,112,-82,127,-49,101,-123,-90,94,-69,97,-107,-76,-78,103,108,127,-126,102,-114,96,-127,-107,-86,84,127,23,-77,-105,84,103,-127,90,-114,-86,-125,110,-68,-115,98,127,-127,-33,99,-96,-85, -60,60,-5,30,-16,64,-26,29,-55,-32,36,-31,41,-36,-33,-12,37,49,69,-37,26,-57,40,-46,-87,-37,31,31,86,-23,-56,23,39,-82,35,-26,-29,-37,41,-54,-127,-30,29,-58,-62,61,-17,-68, 
  /* [0][1][][] */ -103,90,-61,112,-67,105,-113,123,-111,-84,80,-85,82,-93,-94,-95,101,87,-54,-111,103,-115,108,-71,-115,-89,92,98,-127,-75,-114,76,101,28,90,-121,-105,-127,108,-83,-112,-104,117,-121,127,68,-120,-94, -127,127,-97,127,-127,126,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-61,-127,127,-127,127,-115,-127,-127,127,111,13,-127,-127,127,127,40,127,-127,-127,-114,127,-127,-127,127,121,-123,-52,127,-127,-127, -77,77,-74,38,-48,31,-61,51,-52,-37,48,-60,50,-53,-47,-17,59,54,-47,-31,32,-58,46,-52,-125,-55,50,47,97,-51,-65,54,45,11,48,-41,-32,-28,52,-73,-60,-56,23,-72,-80,76,-14,-87, 
  /* [0][2][][] */ -41,39,5,48,-27,43,-54,41,-50,-33,26,-47,30,-44,-37,-50,49,34,-77,-24,30,-29,42,-28,-45,-40,37,-5,-78,-45,-45,35,39,48,46,-68,-43,-58,28,-50,-103,-49,40,-85,74,29,-65,-57, -70,58,-69,58,-57,33,-62,61,-73,-42,45,-67,52,-69,-58,-51,65,49,-97,-19,31,-26,48,-44,-53,-59,50,25,-2,-78,-66,57,43,64,61,-73,-57,-51,33,-55,-53,70,39,-101,-33,55,-65,-79, -25,33,-63,14,-27,-5,-33,43,-13,-5,19,-31,27,-30,-24,11,34,18,-65,7,11,4,18,-18,-42,-23,22,10,59,-24,-13,30,8,39,24,-15,-4,-8,14,-32,15,-16,-10,-38,-44,42,-6,-57, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036633252166211605, 0.0042043211869895458, 0.0027720450889319181, 0.0060354652814567089, 0.0042447797022759914, 0.0031819853466004133, 0.0021391678601503372, 0.0089370319619774818, 0.0040072556585073471, 0.0024310224689543247, 0.002869234187528491, 0.0045741451904177666, 0.0027916603721678257, 0.0043331440538167953, 0.0021615030709654093, 0.003628529841080308, 0.0040258374065160751, 0.0029774198774248362, 0.0064561464823782444, 0.0020115645602345467, 0.0031940799672156572, 0.0026277310680598021, 0.0037020423915237188, 0.0043326281011104584, 0.0025281449779868126, 0.0022572358138859272, 0.00287022371776402, 0.0019331936491653323, 0.012064027599990368, 0.0052450508810579777, 0.0024658783804625273, 0.015817359089851379, 0.005183020606637001, 0.008317314088344574, 0.0040095848962664604, 0.0031064995564520359, 0.0044264104217290878, 0.0027532509993761778, 0.0039273458532989025, 0.0034672783222049475, 0.0022059709299355745, 0.006597339641302824, 0.014007166028022766, 0.0027332867030054331, 0.0061003812588751316, 0.0024236228782683611, 0.0018990393728017807, 0.0023602251894772053, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2845, -1441, 1057, -2480, 5137, -860, 4625, -4529, 1545, 924, 3061, 6064, 409, -603, 1071, 6645, -2150, 4061, 6669, 1068, -909, 3037, -969, 5206, 3204, 2617, 1556, -1140, 9948, -510, 3575, -2801, -1208, 4957, -1074, 2475, 2042, 1220, 712, 6276, 2413, 10711, -6191, 1891, 8371, 83, 2671, 3721, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00015398339019156992, 0.00024626305093988776, 0.00020553619833663106, 0.00019221652473788708, 0.00014715883298777044, 0.00015914675896055996, 0.00016371136007364839, 0.00011828344577224925, 0.00020793837029486895, 0.00020443159155547619, 0.00013857216981705278, 0.00013043516082689166, 0.00028826654306612909, 0.00024782656691968441, 0.00017374845629092306, 0.00012005413736915216, 0.00019937429169658571, 0.00018427828035783023, 0.00013141603267285973, 0.00023840935318730772, 0.00023536304070148617, 0.00018836303206626326, 0.00015155234723351896, 0.00015668959531467408, 0.00014613766688853502, 0.00015620507474523038, 0.00021445404854603112, 0.00020073578343726695, 9.1052337666042149e-05, 0.00019861043256241828, 0.00012796129158232361, 0.00012718496145680547, 0.00013612686598207802, 0.00015266184345819056, 0.00020664336625486612, 0.00021890166681259871, 0.00021635919983964413, 0.00019126426195725799, 0.00014887802535668015, 0.00012643882655538619, 0.00021158736490178853, 8.1119811511598527e-05, 9.2563772341236472e-05, 0.00022889940009918064, 9.97857641777955e-05, 0.00020219932775944471, 0.0002045414294116199, 0.00016642081027384847, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 76,28,127,-40,63,109,-76,-56, 
  /* [1][0][][] */ 12,-86,-127,7,49,26,29,0, 
  /* [2][0][][] */ -127,-8,-47,-25,58,24,-72,-43, 
  /* [3][0][][] */ 42,73,127,-73,-7,-102,-11,-10, 
  /* [4][0][][] */ -127,24,-51,-24,47,14,-42,-56, 
  /* [5][0][][] */ -98,25,-59,-12,6,37,-80,-127, 
  /* [6][0][][] */ -36,-127,-116,42,94,15,7,46, 
  /* [7][0][][] */ -63,-127,-96,-80,-71,-69,17,86, 
  /* [8][0][][] */ 86,27,-5,-6,90,-79,-127,9, 
  /* [9][0][][] */ -36,51,-53,92,-59,-43,127,-34, 
  /* [10][0][][] */ -24,127,35,64,119,-21,-13,57, 
  /* [11][0][][] */ -77,-38,-21,-10,-85,104,127,-7, 
  /* [12][0][][] */ 64,32,-127,33,-10,-32,-65,-13, 
  /* [13][0][][] */ 59,-27,-68,10,15,-127,-25,-20, 
  /* [14][0][][] */ 12,-83,80,8,127,-118,-66,19, 
  /* [15][0][][] */ -39,-45,-3,127,63,83,-74,27, 
  /* [16][0][][] */ 117,29,-39,16,76,-112,-127,-24, 
  /* [17][0][][] */ 61,127,55,74,44,66,25,-87, 
  /* [18][0][][] */ 38,-13,4,1,127,1,27,-12, 
  /* [19][0][][] */ 15,127,31,12,-126,17,27,-35, 
  /* [20][0][][] */ -45,21,66,-127,19,39,-19,109, 
  /* [21][0][][] */ -31,66,36,-127,26,51,-11,110, 
  /* [22][0][][] */ -68,-63,-97,16,-127,117,109,-22, 
  /* [23][0][][] */ 95,39,-127,16,11,-47,-68,-18, 
  /* [24][0][][] */ -57,46,3,3,-19,83,-127,105, 
  /* [25][0][][] */ -101,-59,-127,7,-61,-65,67,97, 
  /* [26][0][][] */ 45,-9,-39,-35,103,-15,127,-42, 
  /* [27][0][][] */ 127,-68,24,88,-3,32,-21,95, 
  /* [28][0][][] */ 43,54,57,-7,127,-50,47,-32, 
  /* [29][0][][] */ -14,-15,-25,-44,-69,11,127,-35, 
  /* [30][0][][] */ 42,-127,-53,-76,-113,-4,10,-53, 
  /* [31][0][][] */ 11,24,-9,-14,-127,3,-23,-14, 
  /* [32][0][][] */ 41,-60,-65,83,-5,-91,124,-127, 
  /* [33][0][][] */ 51,127,49,36,55,-16,-28,-23, 
  /* [34][0][][] */ -125,-31,127,-8,-25,107,98,14, 
  /* [35][0][][] */ -30,70,127,-11,-62,-65,-40,27, 
  /* [36][0][][] */ -92,5,95,-18,-17,127,79,25, 
  /* [37][0][][] */ -21,-78,-11,-127,-44,-79,72,46, 
  /* [38][0][][] */ 49,-18,87,-60,57,62,-127,8, 
  /* [39][0][][] */ -14,84,-127,-45,-25,3,3,76, 
  /* [40][0][][] */ 64,-51,19,29,9,3,8,127, 
  /* [41][0][][] */ -28,97,127,-3,11,82,-80,30, 
  /* [42][0][][] */ 67,-127,-121,-23,-124,3,20,-97, 
  /* [43][0][][] */ -8,-84,32,-62,127,-37,13,39, 
  /* [44][0][][] */ 6,127,115,24,6,51,-70,11, 
  /* [45][0][][] */ -38,49,10,83,-123,60,-127,22, 
  /* [46][0][][] */ -48,-38,68,51,-120,-127,-31,-3, 
  /* [47][0][][] */ -16,54,40,-108,-127,41,-21,56, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0023542433045804501, 0.0037651015445590019, 0.0031424311455339193, 0.0029387874528765678, 0.0022499030455946922, 0.0024331856984645128, 0.0025029736571013927, 0.0018084287876263261, 0.0031791578512638807, 0.0031255427747964859, 0.0021186219528317451, 0.0019942156504839659, 0.0044072908349335194, 0.0037890060339123011, 0.0026564302388578653, 0.0018355008214712143, 0.0030482220463454723, 0.0028174200560897589, 0.0020092122722417116, 0.0036450268235057592, 0.0035984520800411701, 0.0028798715211451054, 0.0023170751519501209, 0.0023956182412803173, 0.0022342903539538383, 0.0023882105015218258, 0.0032787756063044071, 0.0030690378043800592, 0.0013920939527451992, 0.0030365434940904379, 0.0019563927780836821, 0.0019445235375314951, 0.002081235870718956, 0.0023340382613241673, 0.0031593586318194866, 0.003346774959936738, 0.0033079034183174372, 0.0029242283198982477, 0.0022761875297874212, 0.0019331158837303519, 0.0032349471002817154, 0.0012402361026033759, 0.0014152021612972021, 0.0034996296744793653, 0.0015256188344210386, 0.0030914139933884144, 0.0031272221822291613, 0.0025443981867283583, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1708, 360, 22181, -5919, 4575, -13810, 1713, -13594, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.3049817476421595e-05, 9.851198410615325e-05, 0.00014680263120681047, 0.00011392713349778205, 0.00014168173947837204, 0.00013327886699698865, 7.8524011769331992e-05, 8.4805164078716189e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -42,-49,-20,-61,5,-15,83,86,-96,-87,-34,9,-50,-9,-60,38,-79,11,16,127,59,-25,15,89,71,77,30,2,-90,-57,-73,-56,-51,94,33,-44,31,-29,92,-5,24,3,4,-102,37,-29,-29,-79, 
  /* [1][0][][] */ -17,54,-22,-28,-74,63,-18,-50,-38,70,-16,18,55,47,-46,-9,-18,-121,79,-49,127,6,-60,23,59,-4,-83,62,40,-17,70,37,-30,-18,3,-14,2,108,-16,-28,63,42,-4,17,108,13,-34,59, 
  /* [2][0][][] */ -23,-33,115,3,83,-42,-10,23,-30,-2,-12,45,10,-43,-47,-127,-49,-96,-23,17,-97,20,-36,-34,-46,20,0,-47,-41,8,-30,-11,1,-3,27,-6,25,-30,-47,9,33,-32,32,-44,-40,-44,-60,-48, 
  /* [3][0][][] */ 50,19,65,11,21,-31,31,75,-49,-26,47,-26,-63,56,-19,55,65,34,-31,29,-106,-64,127,-2,11,6,-54,-36,-50,64,120,-63,6,-111,-20,45,-13,-77,-15,75,-77,-59,65,0,-92,-68,58,-4, 
  /* [4][0][][] */ 21,-19,76,-29,8,-11,-3,-1,-58,-5,-22,10,47,-77,38,-96,46,48,-10,-34,9,34,20,7,3,5,61,-18,29,23,-127,-15,-29,-18,4,19,52,-4,35,4,-41,-12,-67,30,-14,-98,4,20, 
  /* [5][0][][] */ 21,-50,56,27,28,19,27,-3,-78,-10,-47,27,27,12,15,-48,93,70,-6,-13,87,-64,127,-86,-19,41,-1,49,9,8,-34,-48,-18,-46,-39,7,44,27,66,1,-74,29,30,25,45,-18,76,-6, 
  /* [6][0][][] */ -46,52,-127,90,53,20,39,22,-20,-6,61,-80,-96,-18,-30,29,-123,33,-10,97,23,50,-91,-94,-10,-18,22,79,-32,-35,-50,8,41,78,-49,-29,-14,-6,84,6,78,69,-126,-60,-35,122,-55,-37, 
  /* [7][0][][] */ 31,69,-84,12,12,58,122,69,41,75,-101,0,-44,4,-66,-51,28,36,119,101,86,1,127,28,100,101,-54,98,-74,33,-5,-73,17,-69,-23,18,2,100,-66,77,-58,46,-6,-83,76,-25,47,-38, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0035296170972287655, 0.0041867592372000217, 0.0062391120009124279, 0.0048419032245874405, 0.0060214740224182606, 0.005664351861923933, 0.0033372705802321434, 0.0036042192950844765, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -504, 10717, -385, -421, 670, -1596, 2770, 552, -4519, -27, -6799, -110, -629, -709, -2030, 4340, 6904, 3004, -593, -4243, -7668, 1051, 17972, -4635, -1243, -1283, 4843, -7828, -369, 501, -8719, 9166, 4632, -14, 4206, 60, 5, -578, 9983, -664, 6054, -2993, 3202, 5577, -1230, 9477, -77, 1680, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00030020924168638885, 0.00014086235023569316, 0.00082575285341590643, 0.00024469575146213174, 0.00024425468291155994, 0.00027920654974877834, 0.00023030352895148098, 0.00030953393434174359, 9.1410038294270635e-05, 0.00030107374186627567, 0.00020636564295273274, 0.0016339650610461831, 0.00047815742436796427, 0.00067537033464759588, 0.00045301817590370774, 0.00063723931089043617, 0.00017071215552277863, 5.7009969168575481e-05, 0.00024107753415592015, 0.00031113476143218577, 0.00024356304493267089, 0.00024471824872307479, 8.4280138253234327e-05, 0.00046303213457576931, 0.0001630392944207415, 0.00038971166941337287, 0.00052549398969858885, 0.00018857255054172128, 0.00026587015599943697, 0.00035835980088450015, 0.00013491304707713425, 0.00011702796473400667, 0.00016572809545323253, 0.00022149572032503784, 0.00013968061830382794, 0.00034755273372866213, 0.0027285150717943907, 0.00037527078529819846, 0.00014664318587165326, 0.00017903736443258822, 0.00018762554100248963, 0.00014035560889169574, 0.0002861284592654556, 0.00020781820057891309, 0.00029005846590735018, 8.2402038970030844e-05, 6.0696002037730068e-05, 0.00017281199689023197, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 11,-33,8,8,-18,-83,-48,46,-32,-3,-4,9,47,-1,-16,5,92,20,29,5,1,-28,-70,17,-9,-12,-3,-19,-57,72,-7,-118,57,-6,-55,-60,-9,-28,7,-7,-19,44,8,4,-11,64,127,-28, -127,-83,-24,127,-67,77,-105,127,31,17,15,-3,54,23,-4,-41,-30,66,32,11,12,127,13,127,127,-28,-46,45,67,-127,-2,-83,78,-7,-43,-127,24,14,-58,-49,-127,-3,-91,-127,35,55,56,108, -12,-3,10,9,-26,39,41,44,10,-32,6,4,-18,3,-5,5,-59,45,-62,-28,-2,-34,127,19,-58,6,10,6,12,37,17,5,-2,-17,-38,75,7,5,15,79,23,-21,25,-41,-7,40,-21,-21, 
  /* [0][1][][] */ -11,-20,-28,0,32,-91,127,-90,-7,10,20,36,127,20,-1,-32,-24,-29,32,47,61,-74,40,10,-66,127,-79,-11,127,-100,43,-127,-42,4,-82,13,10,-56,-41,7,113,127,7,-120,-64,-57,-4,77, 99,-127,127,-1,127,74,-78,-59,34,127,127,-127,-92,127,127,127,127,127,127,127,127,119,4,7,121,-95,-127,127,34,127,127,9,-127,127,127,126,-127,127,-127,-124,36,35,-127,-33,127,-127,-16,76, 23,25,-40,-5,-52,127,-123,91,110,-71,21,63,-33,14,11,-65,18,15,-122,15,26,-121,-36,-5,77,-9,-23,125,-78,-39,21,-40,-30,16,96,-26,38,-3,-3,-86,107,0,29,42,-56,96,92,-85, 
  /* [0][2][][] */ -3,17,5,-31,1,-54,-21,-16,5,0,-2,4,-17,-10,-3,-1,-49,17,14,-36,2,-28,83,-12,-119,6,42,-15,15,-3,6,42,-11,-12,-67,32,1,-8,19,53,-29,3,9,10,-17,21,-11,4, 42,-24,-36,-38,27,40,118,-109,127,-28,-4,8,-73,-19,-24,-70,-16,105,10,24,14,29,-24,-34,-86,59,83,2,-90,13,-25,-2,-22,-6,-40,1,55,-20,1,127,-116,-2,-11,61,35,56,7,-127, -7,21,3,-22,-15,5,-8,-58,-26,-19,-5,5,20,-9,-12,13,49,44,-23,-19,0,-26,-48,-16,21,-20,25,-7,-19,1,-5,26,28,-18,-26,-54,-5,7,29,22,-10,-13,6,16,-15,18,59,-56, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013111446984112263, 0.0061520729213953018, 0.036064226180315018, 0.010686930269002914, 0.010667666792869568, 0.012194167822599411, 0.010058359242975712, 0.013518696650862694, 0.0039922748692333698, 0.013149202801287174, 0.009012887254357338, 0.07136237621307373, 0.020883219316601753, 0.029496366158127785, 0.019785279408097267, 0.027831017971038818, 0.0074557443149387836, 0.0024898739065974951, 0.010528907179832458, 0.013588611967861652, 0.010637460276484489, 0.010687912814319134, 0.0036808811128139496, 0.020222632214426994, 0.0071206367574632168, 0.017020408064126968, 0.022950613871216774, 0.0082357851788401604, 0.011611709371209145, 0.01565113477408886, 0.0058922409079968929, 0.0051111215725541115, 0.0072380686178803444, 0.0096736839041113853, 0.0061004618182778358, 0.015179143287241459, 0.11916615068912506, 0.016389710828661919, 0.0064045474864542484, 0.0078193424269556999, 0.008194425143301487, 0.0061299414373934269, 0.012496477924287319, 0.0090763270854949951, 0.012668117880821228, 0.0035988562740385532, 0.0026508590672165155, 0.0075474530458450317, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3437, 6128, 18989, 1679, 2833, -2187, 6286, 17365, 4742, -1204, 4584, -2686, 25651, -2307, 2639, 22099, -477, 2574, 103, 3492, 4382, 4254, 664, 35130, 7901, 4823, 17007, 1832, 7468, 6492, 749, 1430, 1198, 2333, -280, 359, -3396, -745, 3269, 3022, 5135, 2637, 4526, 5676, 5874, 4566, 2427, 7109, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017219771689269692, 0.00013213636702857912, 5.1790684665320441e-05, 0.00017159536946564913, 0.00017850945005193353, 0.00018411109340377152, 0.00012168327521067113, 5.5086002248572186e-05, 0.00012007673649350181, 0.00017689603555481881, 0.00017679274606052786, 0.00017611065413802862, 3.8574384234379977e-05, 0.0002003969275392592, 0.00018265376274939626, 4.7352317778859288e-05, 0.00023165569291450083, 0.0001712672965368256, 0.00022768117196392268, 0.00017521869449410588, 0.00016152886382769793, 0.00017939573444891721, 0.00026678567519411445, 3.1472845876123756e-05, 0.00010879703768296167, 0.00011672692926367745, 6.0349586419761181e-05, 0.00021228463447187096, 0.00010269563063047826, 0.00011725401418516412, 0.00039685703814029694, 0.00030720472568646073, 0.00017457085778005421, 0.00016701909771654755, 0.00021809994359500706, 0.0002215562853962183, 0.00016326358309015632, 0.00021867654868401587, 0.00017983335419557989, 0.00017101263802032918, 0.00015034200623631477, 0.00018718914361670613, 0.00017841275257524103, 0.00014027468569111079, 0.00012381488340906799, 0.00015946464554872364, 0.000276213075267151, 0.00011751715646823868, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-81,-94,10,89,19,72, 
  /* [1][0][][] */ 63,-73,48,-127,-53,75,-86,-39, 
  /* [2][0][][] */ -29,127,117,45,106,6,52,12, 
  /* [3][0][][] */ 107,41,-96,65,-8,-102,-127,-38, 
  /* [4][0][][] */ -46,33,14,-68,-37,122,127,47, 
  /* [5][0][][] */ 19,71,-127,-73,38,86,26,-25, 
  /* [6][0][][] */ -11,127,59,55,79,14,21,-94, 
  /* [7][0][][] */ 127,-14,-28,31,23,2,99,21, 
  /* [8][0][][] */ 52,127,60,94,116,72,88,-81, 
  /* [9][0][][] */ 51,120,-127,-89,12,99,-1,75, 
  /* [10][0][][] */ -67,-39,24,-48,-3,-30,-49,127, 
  /* [11][0][][] */ 14,-108,-127,-15,20,-14,40,-7, 
  /* [12][0][][] */ -30,-101,-115,-29,-127,25,-68,43, 
  /* [13][0][][] */ -12,9,-102,106,-127,-27,2,-16, 
  /* [14][0][][] */ -65,-45,-127,-10,33,-1,-10,-58, 
  /* [15][0][][] */ 26,-102,-127,11,-95,-24,-26,-12, 
  /* [16][0][][] */ 127,-72,-21,67,-90,27,35,104, 
  /* [17][0][][] */ -26,112,127,-25,-47,-9,-30,-22, 
  /* [18][0][][] */ 5,-127,43,66,-7,-59,47,-84, 
  /* [19][0][][] */ 127,-47,-59,36,-102,7,41,101, 
  /* [20][0][][] */ -29,-127,75,68,-18,-85,-2,-75, 
  /* [21][0][][] */ -4,-49,-15,-37,127,-3,47,17, 
  /* [22][0][][] */ -127,23,-78,47,44,54,-87,-105, 
  /* [23][0][][] */ -93,-50,73,-5,-108,127,125,-52, 
  /* [24][0][][] */ -34,51,-10,-50,-47,118,127,-5, 
  /* [25][0][][] */ -56,-110,-127,-57,-57,-16,-22,-49, 
  /* [26][0][][] */ -17,63,-21,127,-101,34,-55,-5, 
  /* [27][0][][] */ 13,-127,27,73,10,-53,2,-121, 
  /* [28][0][][] */ 17,127,58,46,106,-24,19,-60, 
  /* [29][0][][] */ 110,26,-45,-11,77,-127,-107,35, 
  /* [30][0][][] */ 22,-7,33,-127,20,-26,14,-21, 
  /* [31][0][][] */ 46,-44,3,63,-17,32,15,127, 
  /* [32][0][][] */ -81,-68,14,-61,-63,127,59,90, 
  /* [33][0][][] */ -30,44,50,-37,41,127,-112,71, 
  /* [34][0][][] */ 33,127,-79,-56,17,51,-66,62, 
  /* [35][0][][] */ 10,-127,31,54,-21,-59,40,-79, 
  /* [36][0][][] */ -17,-35,-80,-8,-127,-57,-15,12, 
  /* [37][0][][] */ -53,-127,66,80,-46,-88,-16,-51, 
  /* [38][0][][] */ -78,26,67,-73,-127,-92,-60,88, 
  /* [39][0][][] */ 70,-127,91,43,-6,-72,-11,-81, 
  /* [40][0][][] */ -2,63,24,50,-127,-14,-64,24, 
  /* [41][0][][] */ 103,127,-86,-110,49,24,-7,18, 
  /* [42][0][][] */ -10,-36,-14,12,127,15,45,21, 
  /* [43][0][][] */ 127,22,79,19,-71,-22,63,103, 
  /* [44][0][][] */ 65,46,-24,13,69,-118,-127,23, 
  /* [45][0][][] */ 42,13,18,21,73,-127,-7,-50, 
  /* [46][0][][] */ 56,-38,-9,127,37,56,19,71, 
  /* [47][0][][] */ -80,-74,39,63,-46,13,127,-71, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00310545414686203, 0.0023829785641282797, 0.00093400542391464114, 0.0030945914331823587, 0.0032192815560847521, 0.0033203030470758677, 0.0021944649051874876, 0.00099343399051576853, 0.002165492158383131, 0.0031901849433779716, 0.003188322065398097, 0.0031760211568325758, 0.00069565954618155956, 0.0036140053998678923, 0.0032940211240202188, 0.00085396290523931384, 0.0041777333244681358, 0.0030886749736964703, 0.0041060559451580048, 0.0031599353533238173, 0.0029130496550351381, 0.0032352651469409466, 0.0048112757503986359, 0.00056758872233331203, 0.0019620715174823999, 0.0021050809882581234, 0.0010883586946874857, 0.0038283911999315023, 0.0018520372686907649, 0.0021145865321159363, 0.0071570137515664101, 0.005540202371776104, 0.0031482521444559097, 0.0030120618175715208, 0.0039332658052444458, 0.0039955982938408852, 0.0029443339444696903, 0.0039436644874513149, 0.0032431571744382381, 0.0030840823892503977, 0.002711303299292922, 0.0033758131321519613, 0.0032175376545637846, 0.0025297468528151512, 0.0022329068742692471, 0.0028758230619132519, 0.0049812919460237026, 0.0021193320862948895, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7251, 15330, -4347, 7641, -661, 3826, -11617, -18771, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00024485061294399202, 0.00011856827040901408, 0.00015044322935864329, 0.00013618626690004021, 0.00016670061449985951, 0.00015872983203735203, 0.00024189626856241375, 0.00013225805014371872, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -46,-4,32,11,-33,-15,10,10,-41,-5,-66,-55,-23,-66,-10,-32,45,-39,40,42,-16,32,-38,12,2,-37,56,-13,-3,-19,18,11,82,36,39,-127,16,-2,-18,-35,5,-18,45,46,36,4,28,1, 
  /* [1][0][][] */ -1,39,67,-29,-12,43,-49,-28,4,27,-16,-94,12,90,-14,60,-16,17,-24,-57,13,-83,-30,20,-72,-10,-3,-117,-25,-15,34,-56,51,79,-39,3,127,-31,1,48,-27,37,-83,-29,117,-19,-33,-28, 
  /* [2][0][][] */ -6,-20,-60,14,-3,45,26,3,-8,41,-1,28,62,-91,18,-60,35,-89,23,33,-23,52,-5,28,-18,61,-23,-70,16,5,20,-70,-45,-88,37,-32,106,23,-13,-58,-1,30,77,26,127,18,20,24, 
  /* [3][0][][] */ -4,26,-70,39,11,-37,-74,-105,11,-23,-39,1,4,26,33,77,-10,17,-37,27,2,-100,32,-61,-71,-11,127,-12,-44,0,-71,20,-1,-83,10,-12,-21,-44,-24,105,-48,-37,0,19,39,1,-42,43, 
  /* [4][0][][] */ -26,-47,-5,9,30,-27,-12,-9,27,-29,58,-78,5,30,8,10,-13,-25,12,-15,-2,-52,3,-17,15,-8,40,46,34,23,-14,25,-9,-1,3,-3,-66,83,33,-24,31,-18,-21,-23,-74,13,127,11, 
  /* [5][0][][] */ 47,-21,3,14,26,-46,34,-127,26,-28,-10,118,-79,67,25,-66,-1,-91,15,4,-35,66,-36,-51,-57,74,-24,2,-21,51,-41,-36,28,53,35,-7,-40,-8,-48,-40,14,-41,-45,-10,-34,54,90,17, 
  /* [6][0][][] */ 54,-23,21,-11,-36,-18,-36,17,-40,7,-41,127,-42,-37,-6,55,10,46,15,33,36,-82,-21,19,21,38,-64,6,8,-40,14,37,6,17,-14,-2,12,-1,-5,-4,-10,-16,40,56,-2,-35,71,-15, 
  /* [7][0][][] */ -28,2,-7,67,36,31,5,28,25,8,69,-2,127,107,65,52,47,46,-14,3,21,-21,-90,-28,14,0,-26,63,32,-29,-31,-20,36,6,44,-94,-75,40,41,54,-30,35,89,127,-58,-26,-106,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010406150482594967, 0.0050391512922942638, 0.0063938372768461704, 0.0057879160158336163, 0.0070847757160663605, 0.0067460178397595882, 0.010280591435730457, 0.0056209671311080456, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 14166, 5201, 4544, -125, -215, -1089, -874, 33267, 195, 1921, 7039, 57102, 1326, 4199, -157, 11939, -1663, 13623, 802, 8590, 11344, 120, 4160, -9606, 10595, 1355, 4732, 15342, 615, -1672, -9688, 11512, 5058, 2223, -38, 5603, -10064, 8334, 41, 17343, -925, -1000, 7001, 2552, 160, -1171, 1493, -449, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.851338159525767e-05, 8.8612723629921675e-05, 0.00015440581773873419, 0.00015991376130841672, 0.00072200322756543756, 0.00015522644389420748, 0.00021661423670593649, 9.7464420832693577e-05, 0.00013511253928299993, 7.91118000051938e-05, 6.9111069024074823e-05, 5.1424536650301889e-05, 8.7498272478114814e-05, 6.1210717831272632e-05, 0.00022669439204037189, 0.00013683731958735734, 0.00012133709242334589, 0.00031809401116333902, 0.00012944603804498911, 0.00012394877558108419, 0.00011124315642518923, 0.00040741963312029839, 0.00012991135008633137, 0.00022694221115671098, 0.00012936454731971025, 0.00012088150106137618, 5.1022700063185766e-05, 7.9739067587070167e-05, 0.0001906739198602736, 0.00083241035463288426, 0.00024498163838870823, 8.2557133282534778e-05, 9.5390219939872622e-05, 0.00013919820776209235, 0.00020921934628859162, 5.8989004173781723e-05, 7.5843199738301337e-05, 4.9822952860267833e-05, 0.00012503495963755995, 7.1652386395726353e-05, 0.00015537063882220536, 0.00015112587425392121, 6.2319173594005406e-05, 8.0811842053662986e-05, 8.4063613030593842e-05, 0.00036992807872593403, 6.8231180193834007e-05, 0.00022510159760713577, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -61,-105,-17,-22,127,-55,75,-62,-88,-80,-20,-45,112,42,73,-127,59,-27,2,-44,-75,106,0,18,-13,77,62,-32,75,-68,18,-41,-112,-89,41,72,24,81,112,-71,-122,-15,36,68,44,-127,94,76, -69,-121,-76,52,-82,107,65,-64,-69,40,72,-104,127,90,121,-74,-86,-87,35,-57,-68,102,-68,116,-87,105,93,-122,94,-46,9,-127,-50,-87,73,127,117,118,127,-70,-127,-67,68,89,84,110,96,73, -7,-56,-63,98,-42,-27,30,-12,84,22,53,-68,21,57,-37,-2,-80,-19,34,-39,-27,16,-84,-4,-66,49,22,-93,30,58,113,-74,15,11,-10,52,83,68,41,-6,-23,93,64,32,38,33,19,-114, 
  /* [0][1][][] */ -124,-103,-20,-78,-77,-74,100,-117,-127,-127,83,-75,96,55,-125,-81,127,-127,-63,-79,-88,118,-42,14,-9,91,105,-48,-107,-76,4,-52,-99,-127,-127,64,41,85,3,-92,63,-17,79,112,75,109,123,-127, -127,-127,-127,-107,-24,127,127,-127,85,62,127,-127,112,127,74,-122,60,-96,-127,-127,-127,127,-127,127,-127,127,127,-127,-127,127,-11,-126,-127,-108,46,122,127,127,-19,-127,98,-99,127,127,127,0,127,106, -52,-69,-118,127,75,-43,51,-31,61,28,21,-56,14,64,84,-59,-14,1,-16,-70,-62,15,-74,-18,-108,51,29,-92,-56,41,127,-87,-60,10,60,74,85,70,-35,-31,41,127,77,22,54,-43,19,23, 
  /* [0][2][][] */ -121,-40,17,15,-39,-29,23,-48,25,-43,20,-30,7,25,-41,-20,-88,-23,91,-30,-4,45,-66,-9,1,46,71,-12,33,57,-4,-4,-2,-87,-42,34,14,9,-67,-36,21,-3,39,36,23,55,14,-67, -91,-49,-35,-72,92,42,58,-56,89,23,-33,-55,-1,42,-127,-85,37,7,46,-65,-33,34,-68,55,-65,55,70,-40,37,7,-26,-33,-67,-24,-63,51,31,20,-116,-68,25,-43,74,65,40,-103,23,0, -35,-32,-48,-22,-20,-11,15,-28,-71,15,-10,-12,-7,15,36,-31,37,36,-1,-52,-35,1,-21,-31,-49,3,18,-25,5,-59,54,-24,-88,18,21,42,23,18,-62,-30,-2,49,22,19,19,0,5,35, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033368186559528112, 0.0037660407833755016, 0.0065622469410300255, 0.006796334870159626, 0.030685136094689369, 0.0065971240401268005, 0.0092061050236225128, 0.0041422378271818161, 0.005742283072322607, 0.0033622514456510544, 0.0029372205026447773, 0.0021855428349226713, 0.0037186765111982822, 0.0026014554314315319, 0.0096345115453004837, 0.0058155860751867294, 0.0051568262279033661, 0.013518995605409145, 0.0055014565587043762, 0.0052678226493299007, 0.0047278339043259621, 0.01731533370912075, 0.0055212322622537613, 0.0096450438722968102, 0.0054979929700493813, 0.005137463565915823, 0.00216846470721066, 0.0033889103215187788, 0.0081036416813731194, 0.035377439111471176, 0.010411719791591167, 0.0035086781717836857, 0.0040540844202041626, 0.0059159239754080772, 0.0088918218389153481, 0.0025070325937122107, 0.0032233360689133406, 0.0021174754947423935, 0.0053139859810471535, 0.003045226214453578, 0.0066032521426677704, 0.0064228493720293045, 0.0026485647540539503, 0.0034345032181590796, 0.0035727035719901323, 0.015721943229436874, 0.002899825107306242, 0.009566817432641983, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1231, -523, -479, 1369, 14539, 2117, -601, 4936, 1589, 1306, 326, 3090, 1247, 587, -1130, 472, 3989, 11636, 3558, -780, 1320, -1431, -73, 2199, -280, -676, 1874, -26, 3620, 16789, 2083, -12, 418, -139, 3034, 37, 559, -164, 1294, 1257, 1875, 2398, 235, -307, 716, 2625, 1563, -219, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00041182144195772707, 0.00038720664451830089, 0.00026333195273764431, 0.00027731389855034649, 6.8516048486344516e-05, 0.00029417310724966228, 0.0004413951828610152, 0.00018458998238202184, 0.0002832415048032999, 0.0005038559902459383, 0.00028760879649780691, 0.00028025158098898828, 0.00020521377155091614, 0.00034136595786549151, 0.00026656623231247067, 0.00029262289172038436, 0.00018697882478591055, 7.9424666182603687e-05, 0.00020946470613125712, 0.00032054915209300816, 0.00034521432826295495, 0.0001768429356161505, 0.00041779165621846914, 0.00033372902544215322, 0.00045874819625169039, 0.0008101564017124474, 0.00027352225151844323, 0.00080651597818359733, 0.0002243405906483531, 5.7864461268763989e-05, 0.00034243430127389729, 0.00067676417529582977, 0.00037265408900566399, 0.00035931041929870844, 0.00024363199190702289, 0.0003216426121070981, 0.00037386652547866106, 0.00064684823155403137, 0.00035710196243599057, 0.00046590171405114233, 0.00029471918242052197, 0.00027654762379825115, 0.00030629799584858119, 0.00042776009649969637, 0.00039433053461834788, 0.00019751567742787302, 0.00023894068726804107, 0.00028141881921328604, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -40,29,4,-20,-81,-35,-127,30, 
  /* [1][0][][] */ 86,-82,-58,-55,127,-91,100,23, 
  /* [2][0][][] */ -105,125,-49,-127,51,-19,-29,42, 
  /* [3][0][][] */ 55,20,99,10,98,126,127,-13, 
  /* [4][0][][] */ -75,-127,66,10,-56,-116,1,-36, 
  /* [5][0][][] */ 127,-24,70,68,-74,-10,0,-22, 
  /* [6][0][][] */ 24,34,127,-28,41,-39,-45,27, 
  /* [7][0][][] */ 30,7,-127,-33,-40,96,98,-75, 
  /* [8][0][][] */ 1,127,-31,9,63,108,47,53, 
  /* [9][0][][] */ -9,121,-66,94,10,-113,45,127, 
  /* [10][0][][] */ 6,-127,-3,-32,-79,-126,-60,-89, 
  /* [11][0][][] */ -127,-80,107,51,-7,-65,96,65, 
  /* [12][0][][] */ -27,46,-127,80,36,-54,-76,100, 
  /* [13][0][][] */ 95,-127,96,83,11,35,39,-59, 
  /* [14][0][][] */ -32,101,-44,-127,-28,-115,-29,-61, 
  /* [15][0][][] */ 39,112,32,-19,34,-66,94,-127, 
  /* [16][0][][] */ -124,-127,-65,91,-52,24,-24,87, 
  /* [17][0][][] */ -25,-116,-127,88,-67,70,-57,71, 
  /* [18][0][][] */ -95,-79,-56,93,-7,71,-1,127, 
  /* [19][0][][] */ 61,-124,103,-127,13,-71,29,-33, 
  /* [20][0][][] */ -1,79,36,13,46,127,73,-13, 
  /* [21][0][][] */ 27,114,46,-33,38,-70,91,-127, 
  /* [22][0][][] */ 24,13,105,17,-8,127,31,-39, 
  /* [23][0][][] */ -103,-68,36,-74,87,94,-65,-127, 
  /* [24][0][][] */ -98,-93,37,-87,110,111,-47,-127, 
  /* [25][0][][] */ 127,8,-61,-13,12,33,-61,-8, 
  /* [26][0][][] */ -127,-33,-124,-26,-49,-30,21,0, 
  /* [27][0][][] */ 80,32,0,-59,-127,-26,88,88, 
  /* [28][0][][] */ -127,-83,1,51,-74,-101,7,3, 
  /* [29][0][][] */ 119,102,40,-127,25,11,-66,-94, 
  /* [30][0][][] */ -87,-71,40,-68,69,82,-54,-127, 
  /* [31][0][][] */ 50,46,-4,127,4,-78,5,8, 
  /* [32][0][][] */ -31,127,-10,40,20,73,-16,54, 
  /* [33][0][][] */ -40,127,-78,25,19,-30,-29,2, 
  /* [34][0][][] */ -127,-106,-51,98,-11,10,19,102, 
  /* [35][0][][] */ -48,127,-27,-5,72,107,56,66, 
  /* [36][0][][] */ 75,32,4,-49,-127,-33,104,110, 
  /* [37][0][][] */ -64,110,28,20,-127,106,-25,-101, 
  /* [38][0][][] */ 34,38,32,18,127,71,104,53, 
  /* [39][0][][] */ -23,-73,39,-19,9,35,-102,127, 
  /* [40][0][][] */ -66,-58,-71,127,-28,-2,12,65, 
  /* [41][0][][] */ 127,10,58,104,-51,-10,-2,-24, 
  /* [42][0][][] */ -42,10,-73,-127,55,-105,6,85, 
  /* [43][0][][] */ 23,-4,84,-7,37,127,88,9, 
  /* [44][0][][] */ -31,-26,-70,127,49,11,-43,-38, 
  /* [45][0][][] */ 67,127,113,-113,45,-64,15,-115, 
  /* [46][0][][] */ -32,-127,-42,34,-10,38,-62,119, 
  /* [47][0][][] */ 42,45,127,4,91,125,127,-21, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0045495745725929737, 0.0042776442132890224, 0.0029091453179717064, 0.0030636100564152002, 0.00075692730024456978, 0.003249861067160964, 0.0048762890510261059, 0.0020392476581037045, 0.0031290948390960693, 0.0055663213133811951, 0.0031773422379046679, 0.0030960638541728258, 0.002267087809741497, 0.0037712214980274439, 0.0029448757413774729, 0.0032327352091670036, 0.0020656383130699396, 0.00087743962649255991, 0.0023140497505664825, 0.0035412490833550692, 0.0038137363735586405, 0.0019536626059561968, 0.0046155303716659546, 0.0036868529859930277, 0.0050679952837526798, 0.0089501580223441124, 0.0030217219609767199, 0.0089099407196044922, 0.0024783902335911989, 0.00063925446011126041, 0.0037830239161849022, 0.0074765151366591454, 0.0041168755851686001, 0.0039694621227681637, 0.0026915110647678375, 0.0035533290356397629, 0.0041302698664367199, 0.007146020419895649, 0.003945064265280962, 0.0051470235921442509, 0.0032558939419686794, 0.0030551445670425892, 0.0033838101662695408, 0.0047256560064852238, 0.0043563446961343288, 0.0021820436231791973, 0.0026396841276437044, 0.0031089589465409517, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7820, -2918, 11954, -9828, 23296, 7881, -9130, 11203, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00016771610535215586, 0.0002234131534351036, 0.00018250280118081719, 0.00026150332996621728, 0.00018610509869176894, 0.00017120053234975785, 0.00017320044571533799, 0.00026430271100252867, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -12,-13,-22,-69,-27,-35,18,-17,40,7,-32,-5,115,127,-19,-109, 
  /* [1][0][][] */ 127,-59,-44,16,-47,70,-70,-43,-40,83,-33,-52,-9,4,-64,-18, 
  /* [2][0][][] */ -38,-96,40,44,45,-56,-74,-18,28,-86,25,-127,42,-20,-76,24, 
  /* [3][0][][] */ 38,11,16,18,-12,70,-53,-22,127,47,9,21,2,-12,10,22, 
  /* [4][0][][] */ -97,-37,-24,-127,-12,41,55,-119,30,-16,-47,-39,-124,31,-39,-26, 
  /* [5][0][][] */ 88,52,70,-30,44,-49,-127,-126,-17,-79,66,50,-59,50,65,-48, 
  /* [6][0][][] */ 111,36,-127,-80,25,-75,2,-94,-43,20,-127,93,91,-91,4,72, 
  /* [7][0][][] */ -127,-3,99,-28,-63,2,-1,-61,-50,60,86,-31,63,-27,32,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0071279346011579037, 0.0094950590282678604, 0.0077563691884279251, 0.011113891378045082, 0.0079094665125012398, 0.0072760223411023617, 0.0073610185645520687, 0.011232865042984486, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 18428, -299, 11, 2871, -716, 383, 10778, 1340, -1244, 273, -2192, 3114, 977, -591, -229, -1313, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012600597983691841, 0.0001972090540220961, 0.00016703551227692515, 0.0001827683299779892, 0.001166293048299849, 0.00088214519200846553, 0.000150244653923437, 0.00089649943402037024, 0.00036913494113832712, 0.0011486541479825974, 0.00029853454907424748, 0.00019449515093583614, 9.8655109468381852e-05, 0.00024271546863019466, 0.00021184798970352858, 0.00047964445548132062, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-5,5,2,-20,11,5,16,-7,-11,-1,-8,0,-7,2,0, 4,-6,3,1,13,-2,10,-26,-8,9,-5,87,-7,20,6,1, 1,-6,-3,0,1,-14,-3,10,3,2,-5,-11,3,-4,-3,0, 
  /* [0][1][][] */ 12,-11,2,2,127,-25,-127,-21,127,127,-2,-6,109,-24,-1,-18, -127,127,127,-3,-88,-92,-18,-102,17,-106,127,127,127,127,127,127, 19,-5,-3,-2,-10,127,2,-11,-1,-13,-7,-6,11,-3,-13,-8, 
  /* [0][2][][] */ 1,-5,2,-15,-19,15,54,7,-10,-8,-2,0,-6,1,-6,-10, 22,-16,-3,-127,6,-16,-11,127,-5,1,2,-16,-8,-57,-9,-35, 2,-6,-1,-4,0,-5,-2,-3,1,2,-3,-1,1,-4,-7,-11, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053552542813122272, 0.0083813844248652458, 0.0070990091189742088, 0.0077676540240645409, 0.049567453563213348, 0.037491168826818466, 0.006385397631675005, 0.038101226091384888, 0.015688234940171242, 0.048817802220582962, 0.012687717564404011, 0.0082660438492894173, 0.0041928421705961227, 0.010315407067537308, 0.0090035395696759224, 0.020384889096021652, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 2446, 485, 703, 2137, 78576, 61675, 2651, -2674, 7077, -785, 1781, 59, 6717, -26378, 333, 60936, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00018158368766307831, 0.00069586781319230795, 0.00018381221161689609, 0.00013893515279050916, 2.0998750187573023e-05, 2.8929411200806499e-05, 0.00012167740351287648, 2.3365741071756929e-05, 0.00011279937461949885, 3.2190426281886175e-05, 0.00039856586954556406, 0.00054415472550317645, 0.00028685113647952676, 1.4765394553251099e-05, 0.0005400165100581944, 3.0487555704894476e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -49, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -95, -80, 
  /* [3][0][][] */ 118, 124, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 28, -58, 1, 
  /* [4][1][][] */ 29, -127, 2, 
  /* [4][2][][] */ 17, -87, -14, 
  /* [5][0][][] */ -62, 29, -2, 
  /* [5][1][][] */ -127, 34, 2, 
  /* [5][2][][] */ -84, 27, -1, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -48, 57, -14, 
  /* [6][2][][] */ -34, -49, -85, 
  /* [7][0][][] */ 39, 30, -13, 
  /* [7][1][][] */ 127, 73, -4, 
  /* [7][2][][] */ 33, 6, -22, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -22, 50, -11, 
  /* [9][1][][] */ -15, 127, -13, 
  /* [9][2][][] */ -5, 89, -8, 
  /* [10][0][][] */ 24, 87, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -78, 78, 5, 
  /* [13][0][][] */ 76, 18, -10, 
  /* [13][1][][] */ 127, 107, -5, 
  /* [13][2][][] */ 74, 111, 44, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -86, -29, 17, 
  /* [15][1][][] */ -127, -127, 15, 
  /* [15][2][][] */ -26, -81, -10, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.046303838491439819, 0.17744627594947815, 0.046872112900018692, 0.035428460687398911, 0.0053546810522675514, 0.007376999594271183, 0.031027736142277718, 0.0059582637622952461, 0.028763838112354279, 0.0082085579633712769, 0.10163429379463196, 0.13875944912433624, 0.073147036135196686, 0.0037651753518730402, 0.13770420849323273, 0.0077743260189890862, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.090518668293952942, } };
const TfArray<1, int> quant46_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.055450089275836945, } };
const TfArray<1, int> quant50_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.022896729409694672, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.046589728444814682, } };
const TfArray<1, int> quant53_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.065406747162342072, } };
const TfArray<1, int> quant54_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.021032894030213356, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.03859436884522438, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.018460944294929504, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022191694006323814, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.039138749241828918, } };
const TfArray<1, int> quant61_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.051227301359176636, } };
const TfArray<1, int> quant62_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.017830902710556984, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.032126337289810181, } };
const TfArray<1, int> quant65_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.066114805638790131, } };
const TfArray<1, int> quant66_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.018368463963270187, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.029053451493382454, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.040525637567043304, } };
const TfArray<1, int> quant69_zero = { 1, { -54 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_22_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_22_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
